SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021, 2022 embedded brains GmbH & Co. KG
enabled-by:
  and:
  - RTEMS_SMP
  - bsps/sparc/leon3
links: []
test-actions:
- action-brief: |
    Check the effects of the leon3 BSP family shutdown procedure.
  action-code: |
    irqamp  *regs;
    uint32_t counter;

    regs = LEON3_IrqCtrl_Regs;
  checks:
  - brief: |
      Check that the second processor was not powered down during system
      initialization.
    code: |
      T_step_eq_u32( ${.:/step}, mpstat_during_sysinit & 0x2, 0 );
    links: []
  - brief: |
      Wait until the second processor is powered down.
    code: |
      while ( ( grlib_load_32( &regs->mpstat ) & 0x2 ) != 0x2U ) {
        /* Wait */
      }
    links: []
  - brief: |
      Check that the RTEMS_FATAL_SOURCE_SMP with SMP_FATAL_SHUTDOWN_RESPONSE
      fatal error occurred exactly once.
    code: |
      counter = Add( &shutdown_response_counter, 0 );
      T_step_eq_uint( ${.:/step}, counter, 1 );
    links: []
  - brief: |
      Check that the RTEMS_FATAL_SOURCE_SMP with SMP_FATAL_SHUTDOWN_RESPONSE
      fatal error occurred on the second processor.
    code: |
      T_step_eq_u32( ${.:/step}, shutdown_response_cpu_index, 1 );
    links: []
  - brief: |
      Check that no dynamic fatal error extension was invoked.  This shows that
      the leon3 BSP family shutdown procedure called the wrapped
      _CPU_Fatal_halt() function of the test suite.
    code: |
      T_step_rsc_success( ${.:/step}, status );
      counter = Add( &dynamic_fatal_extension_counter, 0 );
      T_step_eq_u32( ${.:/step}, dynamic_fatal_extension_counter, 0 );
    links:
    - role: validation
      uid: ../req/fatal-shutdown-halt
  links:
  - role: validation
    uid: ../req/fatal-shutdown-request
  - role: validation
    uid: ../req/fatal-shutdown-response
test-brief: |
  Tests the leon3 BSP family shutdown procedure.
test-context: []
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems/sysinit.h
- rtems/score/smpimpl.h
- bsp/leon3.h
test-local-includes:
- tx-support.h
test-setup: null
test-stop: null
test-support: |
  static uint32_t mpstat_during_sysinit;

  static Atomic_Uint shutdown_response_counter;

  static uint32_t shutdown_response_cpu_index = UINT32_MAX;

  static Atomic_Uint dynamic_fatal_extension_counter;

  static rtems_status_code status;

  static unsigned int Add( Atomic_Uint *a, unsigned int b )
  {
    return _Atomic_Fetch_add_uint( a, b, ATOMIC_ORDER_RELAXED );
  }

  static void ShutdownFatalHandler(
    rtems_fatal_source source,
    rtems_fatal_code   code,
    void              *arg
  )
  {
    T_null( arg );

    if (
      source == RTEMS_FATAL_SOURCE_SMP &&
      code == SMP_FATAL_SHUTDOWN_RESPONSE
    ) {
      (void) Add( &shutdown_response_counter, 1 );
      shutdown_response_cpu_index = rtems_scheduler_get_processor();
    }
  }

  static void DynamicFatalHandler(
    rtems_fatal_source source,
    bool               always_set_to_false,
    rtems_fatal_code   code
  )
  {
    (void) source;
    (void) code;
    (void) always_set_to_false;
    (void) Add( &dynamic_fatal_extension_counter, 1 );
  }

  static void InitTestCase( void )
  {
    rtems_extensions_table table = { .fatal = DynamicFatalHandler };
    irqamp                *regs;
    rtems_id               id;

    regs = LEON3_IrqCtrl_Regs;
    mpstat_during_sysinit = grlib_load_32( &regs->mpstat );
    SetFatalHandler( ShutdownFatalHandler, NULL );
    status = rtems_extension_create( OBJECT_NAME, &table, &id );
  }

  RTEMS_SYSINIT_ITEM(
    InitTestCase,
    RTEMS_SYSINIT_DEVICE_DRIVERS,
    RTEMS_SYSINIT_ORDER_MIDDLE
  );
test-target: testsuites/validation/bsps/tc-fatal-sparc-leon3-shutdown.c
test-teardown: null
type: test-case
