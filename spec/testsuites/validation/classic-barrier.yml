SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2020 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
links: []
test-actions:
- action: |
    rtems_status_code sc;
    rtems_id          id;
    TestsuitesValidationClassicBarrier_Context *ctx = T_fixture_context();

    ctx->id = 0xffffffff;
    sc = rtems_barrier_create(
      name,
      RTEMS_BARRIER_AUTOMATIC_RELEASE,
      1,
      &ctx->id
    );
  checks:
  - check: |
      T_step_rsc_success(${step}, sc);
    description: |
      Check that the barrier creation was successful.
    links: []
  description: |
    Set an object identifier to an invalid value and create an automatic
    release barrier object for one task.
  links: []
- action: |
    id = 0xffffffff;
    sc = rtems_barrier_ident(name, &id);
  checks:
  - check: |
      T_step_rsc_success(${step}, sc);
    description: |
      Check that the barrier identification by name was successful.
    links: []
  - check: |
      T_step_eq_u32(${step}, id, ctx->id);
    description: |
      Check that the second identifier is equal to the one returned by the
      barrier creation.
    links: []
  description: |
    Set a second object identifier to an invalid value and identify a barrier
    object by its name.
  links: []
- action: |
    uint32_t released;

    released = 1;
    sc = rtems_barrier_release(ctx->id, &released);
  checks:
  - check: |
      T_step_rsc_success(${step}, sc);
    description: |
      Check that the barrier release was successful.
    links: []
  - check: |
      T_step_eq_u32(${step}, released, 0);
    description: |
      Check that the count of released tasks is zero.
    links: []
  description: |
    Set the count of released tasks to one and release the barrier.
  links: []
- action: |
    sc = rtems_barrier_wait(ctx->id, RTEMS_NO_TIMEOUT);
  checks:
  - check: |
      T_step_rsc_success(${step}, sc);
    description: |
      Check that the barrier wait was successful.
    links: []
  description: |
    Wait with an infinite timeout for the barrier.
  links: []
test-brief: |
  This test case calls functions of the Barrier Manager which are included in
  the space profile.
test-context:
- brief: null
  description: null
  member: |
    rtems_id id
test-context-support: null
test-description: null
test-epilogue: null
test-header: null
test-includes:
- rtems.h
test-local-includes: []
test-prologue: null
test-setup: null
test-stop: null
test-support: |
  static const rtems_name name = rtems_build_name( 'B', 'A', 'R', 'R' );
test-target: testsuites/validation/tc-space-profile.c
test-teardown:
  brief: null
  code: |
    T_check_rtems_barriers(T_EVENT_RUN_INITIALIZE_EARLY, T_case_name());
  description: null
type: test-case
