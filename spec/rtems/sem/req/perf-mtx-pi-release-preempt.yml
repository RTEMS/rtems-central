SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
limits: {}
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Release the mutex.
  code: |
    ctx->status = rtems_semaphore_release( ctx->mutex_id );
  description: null
test-cleanup: null
test-prepare: null
test-setup:
  brief: |
    Let one task wait on the mutex.
  code: |
    ObtainMutex( ctx->mutex_id );
    Send( ctx, EVENT_OBTAIN | EVENT_OBTAIN_END | EVENT_RELEASE );
  description: null
test-teardown:
  brief: |
    Set the measured runtime.  Discard samples interrupted by a clock tick.
  code: |
    T_quiet_rsc( ctx->status, RTEMS_SUCCESSFUL );

    *delta = ctx->end - ctx->begin;

    return tic == toc;
  description: null
text: |
  Let ``U` and `V`` be two tasks with the same home scheduler.  Let :math:`B`
  be a time point measured by ``U`` right before a call to
  ${../if/release:/name} which unblocks task ``V``.  Let :math:`E` be a time
  point measured by ``V`` right after the first context switch after :math:`B`.
  While the execution environment is While the execution environment is
  ${.:/environment}, while the semaphore is a priority inheritance mutex, while
  the measurement sample is the runtime of exactly one successful call to
  ${../if/release:/name} which does unblock exactly one waiting task which
  preempts the caller, when exactly ${../val/perf:/params/sample-count} samples
  are collected, the ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
