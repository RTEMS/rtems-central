SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2020, 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
functional-type: action
links:
- role: interface-function
  uid: ../if/construct
post-conditions:
- name: Status
  states:
  - name: Ok
    test-code: |
      T_rsc_success( ctx->status );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/successful:/name}.
  - name: InvAddr
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_ADDRESS );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/invalid-address:/name}.
  - name: InvName
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_NAME );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/invalid-name:/name}.
  - name: InvPrio
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_PRIORITY );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/invalid-priority:/name}.
  - name: InvSize
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_SIZE );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/invalid-size:/name}.
  - name: TooMany
    test-code: |
      T_rsc( ctx->status, RTEMS_TOO_MANY );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/too-many:/name}.
  - name: Unsat
    test-code: |
      T_rsc( ctx->status, RTEMS_UNSATISFIED  );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/unsatisfied:/name}.
  test-epilogue: null
  test-prologue: null
- name: Name
  states:
  - name: Valid
    test-code: |
      id = 0;
      sc = rtems_task_ident( NAME, RTEMS_SEARCH_LOCAL_NODE, &id );
      T_rsc_success( sc );
      T_eq_u32( id, ctx->id_value );
    text: |
      The unique object name shall identify the task constructed by
      the ${../if/construct:/name} call.
  - name: Invalid
    test-code: |
      sc = rtems_task_ident( NAME, RTEMS_SEARCH_LOCAL_NODE, &id );
      T_rsc( sc, RTEMS_INVALID_NAME );
    text: |
      The unique object name shall not identify a task.
  test-epilogue: null
  test-prologue: |
    rtems_status_code sc;
    rtems_id          id;
- name: IdValue
  states:
  - name: Assigned
    test-code: |
      T_eq_ptr( ctx->id, &ctx->id_value );
      T_ne_u32( ctx->id_value, INVALID_ID );
    text: |
      The value of the object identifier variable shall be equal to the object
      identifier of the task constructed by the ${../if/construct:/name} call.
  - name: Unchanged
    test-code: |
      T_eq_u32( ctx->id_value, INVALID_ID );
    text: |
      The value of the object identifier variable shall be unchanged by the
      ${../if/construct:/name} call.
  test-epilogue: null
  test-prologue: null
- name: CreateExt
  states:
  - name: 'Yes'
    test-code: |
      T_eq_u32( ctx->create_extension_calls, 1 );
    text: |
      The create user extensions shall be invoked during the
      ${../if/construct:/name} call.
  - name: 'No'
    test-code: |
      T_eq_u32( ctx->create_extension_calls, 0 );
    text: |
      The create user extensions shall not be invoked during the
      ${../if/construct:/name} call.
  test-epilogue: null
  test-prologue: null
- name: DelExt
  states:
  - name: 'Yes'
    test-code: |
      T_eq_u32( ctx->delete_extension_calls, 1 );
    text: |
      The delete user extensions shall be invoked during the
      ${../if/construct:/name} call.
  - name: 'No'
    test-code: |
      T_eq_u32( ctx->delete_extension_calls, 0 );
    text: |
      The delete user extensions shall not be invoked during the
      ${../if/construct:/name} call.
  test-epilogue: null
  test-prologue: null
- name: StoFree
  states:
  - name: 'Yes'
    test-code: |
      T_eq_u32( ctx->storage_free_calls, 1 );
    text: |
      The storage free handler of the task configuration shall be invoked
      during the ${../if/construct:/name} call.
  - name: 'No'
    test-code: |
      T_eq_u32( ctx->storage_free_calls, 0 );
    text: |
      The storage free handler of the task configuration shall not be invoked
      during the ${../if/construct:/name} call.
  test-epilogue: null
  test-prologue: null
pre-conditions:
- name: Id
  states:
  - name: Valid
    test-code: |
      ctx->id = &ctx->id_value;
    text: |
      The id parameter shall reference an object identifier value.
  - name: 'Null'
    test-code: |
      ctx->id = NULL;
    text: |
      The id parameter shall be NULL.
  test-epilogue: null
  test-prologue: null
- name: Name
  states:
  - name: Valid
    test-code: |
      ctx->config.name = NAME;
    text: |
      The name of the task configuration shall be valid.
  - name: Inv
    test-code: |
      ctx->config.name = 0;
    text: |
      The name of the task configuration shall be invalid.
  test-epilogue: null
  test-prologue: null
- name: SysTsk
  states:
  - name: 'Yes'
    test-code: |
      ctx->config.attributes |= RTEMS_SYSTEM_TASK;
    text: |
      The attributes of the task configuration shall specify a system task.
  - name: 'No'
    test-code: |
      /* Nothing to do */
    text: |
      The attributes of the task configuration shall specify an application
      task.
  test-epilogue: null
  test-prologue: null
- name: Prio
  states:
  - name: Valid
    test-code: |
      ctx->config.initial_priority = 254;
    text: |
      The initial priority of the task configuration shall be valid.
  - name: Zero
    test-code: |
      ctx->config.initial_priority = 0;
    text: |
      The initial priority of the task configuration shall be zero.
  - name: Inv
    test-code: |
      ctx->config.initial_priority = 0xffffffff;
    text: |
      The initial priority of the task configuration shall be invalid.
  test-epilogue: null
  test-prologue: null
- name: Free
  states:
  - name: 'Yes'
    test-code: |
      /* Nothing to do */
    text: |
      The system shall have at least one inactive task object available.
  - name: 'No'
    test-code: |
      ctx->seized_objects = T_seize_objects( Create, ctx );
    text: |
      The system shall have no inactive task object available.
  test-epilogue: null
  test-prologue: null
- name: TLS
  states:
  - name: Enough
    test-code: |
      ctx->config.maximum_thread_local_storage_size = MAX_TLS_SIZE;
    text: |
      The maximum thread-local storage size of the task configuration shall be
      greater than or equal to the thread-local storage size.
  - name: Small
    test-code: |
      ctx->config.maximum_thread_local_storage_size = 0;
    text: |
      The maximum thread-local storage size of the task configuration shall be
      less than the thread-local storage size.
  test-epilogue: null
  test-prologue: null
- name: Stack
  states:
  - name: Enough
    test-code: |
      ctx->stack_size = RTEMS_MINIMUM_STACK_SIZE;
    text: |
      The task stack size of the task configuration shall be greater than or
      equal to the configured minimum size.
  - name: Small
    test-code: |
      ctx->stack_size = 0;
    text: |
      The task stack size of the task configuration shall be less than the
      configured minimum size.
  test-epilogue: null
  test-prologue: null
- name: Ext
  states:
  - name: Ok
    test-code: |
      ctx->create_extension_status = true;
    text: |
      None of the task create extensions shall fail.
  - name: Err
    test-code: |
      ctx->create_extension_status = false;
    text: |
      At least one of the task create extensions shall fail.
  test-epilogue: null
  test-prologue: null
rationale: null
references: []
requirement-type: functional
skip-reasons: {}
test-action: |
  ctx->create_extension_calls = 0;
  ctx->delete_extension_calls = 0;
  ctx->storage_free_calls = 0;
  ctx->config.storage_size = RTEMS_TASK_STORAGE_SIZE(
    ctx->config.maximum_thread_local_storage_size + ctx->stack_size,
    ctx->config.attributes
  );
  ctx->status = rtems_task_construct( &ctx->config, ctx->id );
test-brief: null
test-cleanup: |
  if ( ctx->id_value != INVALID_ID ) {
    rtems_status_code sc;

    sc = rtems_task_delete( ctx->id_value );
    T_rsc_success( sc );

    ctx->id_value = INVALID_ID;
  }

  T_surrender_objects( &ctx->seized_objects, rtems_task_delete );
test-context:
- brief: null
  description: null
  member: |
    rtems_status_code status
- brief: null
  description: null
  member: |
    rtems_task_config config
- brief: null
  description: null
  member: |
    rtems_id *id
- brief: null
  description: null
  member: |
    rtems_id id_value
- brief: null
  description: null
  member: |
    bool create_extension_status
- brief: null
  description: null
  member: |
    uint32_t create_extension_calls
- brief: null
  description: null
  member: |
    uint32_t delete_extension_calls
- brief: null
  description: null
  member: |
    uint32_t storage_free_calls
- brief: null
  description: null
  member: |
    size_t stack_size
- brief: null
  description: null
  member: |
    rtems_id extension_id
- brief: null
  description: null
  member: |
    void *seized_objects
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems.h
- string.h
- rtems/score/apimutex.h
- rtems/score/threadimpl.h
test-local-includes: []
test-prepare: |
  _RTEMS_Lock_allocator();
  _Thread_Kill_zombies();
  _RTEMS_Unlock_allocator();

  ctx->id_value = INVALID_ID;
  memset( &ctx->config, 0, sizeof( ctx->config ) );
  ctx->config.storage_area = task_storage,
  ctx->config.storage_free = StorageFree;
test-setup:
  brief: null
  code: |
    rtems_status_code sc;
    int var;

    var = tls_variable;
    RTEMS_OBFUSCATE_VARIABLE( var );
    tls_variable = var;

    sc = rtems_extension_create(
      rtems_build_name( 'T', 'E', 'X', 'T' ),
      &extensions,
      &ctx->extension_id
    );
    T_rsc_success( sc );
  description: null
test-stop: null
test-support: |
  #define NAME rtems_build_name( 'T', 'E', 'S', 'T' )

  #define INVALID_ID 0xffffffff

  typedef RtemsTaskReqConstructErrors_Context Context;

  static _Thread_local int tls_variable;

  #define MAX_TLS_SIZE RTEMS_ALIGN_UP( 128, RTEMS_TASK_STORAGE_ALIGNMENT )

  RTEMS_ALIGNED( RTEMS_TASK_STORAGE_ALIGNMENT ) static char task_storage[
    RTEMS_TASK_STORAGE_SIZE(
      MAX_TLS_SIZE + RTEMS_MINIMUM_STACK_SIZE,
      RTEMS_FLOATING_POINT
    )
  ];

  static const rtems_task_config seize_task_config = {
    .name = rtems_build_name( 'S', 'I', 'Z', 'E' ),
    .initial_priority = 1,
    .storage_area = task_storage,
    .storage_size = sizeof( task_storage ),
    .maximum_thread_local_storage_size = MAX_TLS_SIZE,
    .initial_modes = RTEMS_DEFAULT_MODES,
    .attributes = RTEMS_DEFAULT_MODES
  };

  static void StorageFree( void *ptr )
  {
    T_eq_ptr( ptr, task_storage );
    ++RtemsTaskReqConstructErrors_Instance.storage_free_calls;
  }

  static rtems_status_code Create( void *arg, uint32_t *id )
  {
    Context          *ctx;
    bool              create_extension_status;
    rtems_status_code sc;

    ctx = arg;
    create_extension_status = ctx->create_extension_status;
    ctx->create_extension_status = true;
    sc = rtems_task_construct( &seize_task_config, id );
    ctx->create_extension_status = create_extension_status;

    return sc;
  }

  static bool ThreadCreate( rtems_tcb *executing, rtems_tcb *created )
  {
    (void) executing;
    (void) created;

    ++RtemsTaskReqConstructErrors_Instance.create_extension_calls;
    return RtemsTaskReqConstructErrors_Instance.create_extension_status;
  }

  static void ThreadDelete( rtems_tcb *executing, rtems_tcb *deleted )
  {
    (void) executing;
    (void) deleted;

    ++RtemsTaskReqConstructErrors_Instance.delete_extension_calls;
  }

  static const rtems_extensions_table extensions = {
    .thread_create = ThreadCreate,
    .thread_delete = ThreadDelete
  };
test-target: testsuites/validation/tc-task-construct-errors.c
test-teardown:
  brief: null
  code: |
    rtems_status_code sc;

    sc = rtems_extension_delete( ctx->extension_id );
    T_rsc_success( sc );
  description: null
text: ${.:text-template}
transition-map:
- enabled-by: true
  post-conditions:
    Status: Ok
    Name: Valid
    IdValue: Assigned
    CreateExt: 'Yes'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext:
    - Ok
    Id:
    - Valid
    Name:
    - Valid
    SysTsk: all
    Prio:
    - Valid
    Stack:
    - Enough
    TLS:
    - Enough
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: Ok
    Name: Valid
    IdValue: Assigned
    CreateExt: 'Yes'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext:
    - Ok
    Id:
    - Valid
    Name:
    - Valid
    SysTsk:
    - 'Yes'
    Prio:
    - Zero
    Stack:
    - Enough
    TLS:
    - Enough
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: InvSize
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk:
    - 'Yes'
    Prio:
    - Zero
    Stack:
    - Small
    TLS:
    - Enough
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: InvSize
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk:
    - 'Yes'
    Prio:
    - Zero
    Stack:
    - Enough
    TLS:
    - Small
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: InvSize
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk:
    - 'Yes'
    Prio:
    - Zero
    Stack:
    - Small
    TLS:
    - Small
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: InvName
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id: all
    Name:
    - Inv
    SysTsk: all
    Prio: all
    Stack: all
    TLS: all
    Free: all
- enabled-by: true
  post-conditions:
    Status: InvAddr
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - 'Null'
    Name:
    - Valid
    SysTsk: all
    Prio: all
    Stack: all
    TLS: all
    Free: all
- enabled-by: true
  post-conditions:
    Status: InvPrio
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk:
    - 'Yes'
    Prio:
    - Inv
    Stack: all
    TLS: all
    Free: all
- enabled-by: true
  post-conditions:
    Status: InvPrio
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk:
    - 'No'
    Prio:
    - Zero
    - Inv
    Stack: all
    TLS: all
    Free: all
- enabled-by: true
  post-conditions:
    Status: TooMany
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk: all
    Prio:
    - Valid
    Stack: all
    TLS: all
    Free:
    - 'No'
- enabled-by: true
  post-conditions:
    Status: TooMany
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk:
    - 'Yes'
    Prio:
    - Zero
    Stack: all
    TLS: all
    Free:
    - 'No'
- enabled-by: true
  post-conditions:
    Status: InvSize
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk: all
    Prio:
    - Valid
    Stack: all
    TLS:
    - Small
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: InvSize
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'No'
    DelExt: 'No'
    StoFree: 'No'
  pre-conditions:
    Ext: all
    Id:
    - Valid
    Name:
    - Valid
    SysTsk: all
    Prio:
    - Valid
    Stack:
    - Small
    TLS:
    - Enough
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: Unsat
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'Yes'
    DelExt: 'Yes'
    StoFree: 'Yes'
  pre-conditions:
    Ext:
    - Err
    Id:
    - Valid
    Name:
    - Valid
    SysTsk: all
    Prio:
    - Valid
    Stack:
    - Enough
    TLS:
    - Enough
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: Unsat
    Name: Invalid
    IdValue: Unchanged
    CreateExt: 'Yes'
    DelExt: 'Yes'
    StoFree: 'Yes'
  pre-conditions:
    Ext:
    - Err
    Id:
    - Valid
    Name:
    - Valid
    SysTsk:
    - 'Yes'
    Prio:
    - Zero
    Stack:
    - Enough
    TLS:
    - Enough
    Free:
    - 'Yes'
type: requirement
