# SPDX-License-Identifier: BSD-2-Clause
# Barrier Manager: Promela to RTEMS Refinement

# Copyright (C) 2019-2022 Trinity College Dublin (www.tcd.ie)
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
LANGUAGE: C

SEGNAMEPFX: TestSegment{} # segnumber


NAME: |
  /* Test Name is defined in the Test Case code (tc-model-barrier-mgr.c) */

semaphore_DCL: rtems_id {0}[{1}];

INIT: |
  initialise_semaphore( ctx, semaphore );

Runner: |
  checkTaskIs( ctx->runner_id );

Worker0: |
  checkTaskIs( ctx->worker0_id );

Worker1: |
  checkTaskIs( ctx->worker1_id );

SIGNAL: |
  ReleaseSema( semaphore[{}] );

WAIT: |
  ObtainSema( semaphore[{}] );

barrier_create: |
  T_log(T_NORMAL, "Calling BarrierCreate(%d,%d,%d,%d)", {0}, {1}, {2}, {3} );
  rtems_id bid;
  initialise_id(&bid);
  rtems_status_code rc;
  rtems_attribute attribs;
  attribs = mergeattribs({1});
  rc = rtems_barrier_create({0}, attribs, {2}, {3} ? &bid : NULL);
  T_log(T_NORMAL, "Returned 0x%x from Create", rc );

barrier_ident: |
  T_log(T_NORMAL, "Calling BarrierIdent(%d,%d)", {0}, {1} );
  rtems_id bid;
  initialise_id(&bid);
  rtems_status_code rc;
  rc = rtems_barrier_ident({0} , {1} ? &bid : NULL);
  T_log(T_NORMAL, "Returned 0x%x from Ident", rc );

barrier_wait: |
  rtems_interval timeout = {1};
  T_log(T_NORMAL, "Calling BarrierWait(%d,%d)", bid, timeout );
  rc = rtems_barrier_wait(bid, timeout);
  T_log(T_NORMAL, "Returned 0x%x from Wait", rc );

barrier_delete: |
  T_log(T_NORMAL, "Calling BarrierDelete(%d)", bid);
  rc = rtems_barrier_delete(bid);
  T_log(T_NORMAL, "Returned 0x%x from Delete", rc );

barrier_release: |
  T_log(T_NORMAL, "Calling BarrierRelease(%d,%d)", bid, {1});
  uint32_t released;
  rc = rtems_barrier_release(bid, {1} ? &released : NULL);
  T_log(T_NORMAL, "Returned 0x%x from Release", rc );

rc:
  T_rsc( rc, {0} );

released:
  T_eq_u32( released, {0} );

created:
  /* This is used later for cleanup */
  ctx->barrier_id = bid;

Ready: |
   /* We (Task {0}) must have been recently ready because we are running */

Zombie:
  /* Code to check that Task {0} has terminated */

BarrierWait:
  /* Code to check that Task {0} is waiting on the barrier */

TimeWait:
  /* Code to check that Task {0} is waiting on a timer */

OtherWait:
  /* Code to check that Task {0} is waiting (after pre-emption) */

SUSPEND:
  /* SWITCH[{0}] Suspension of proc{1} in favour of proc{2} */

WAKEUP:
  /* SWITCH[{0}] Wakeup of proc{1} (sometime) after proc{2} */

LowPriority: |
  SetSelfPriority( BM_PRIO_LOW );
  rtems_task_priority prio;
  rtems_status_code sc;
  sc = rtems_task_set_priority( RTEMS_SELF, RTEMS_CURRENT_PRIORITY, &prio );
  T_rsc_success( sc );
  T_eq_u32( prio, BM_PRIO_LOW );

NormalPriority: |
  SetSelfPriority( BM_PRIO_NORMAL );
  rtems_task_priority prio;
  rtems_status_code sc;
  sc = rtems_task_set_priority( RTEMS_SELF, RTEMS_CURRENT_PRIORITY, &prio );
  T_rsc_success( sc );
  T_eq_u32( prio, BM_PRIO_NORMAL );

HighPriority: |
  SetSelfPriority( BM_PRIO_HIGH );
  rtems_task_priority prio;
  rtems_status_code sc;
  sc = rtems_task_set_priority( RTEMS_SELF, RTEMS_CURRENT_PRIORITY, &prio );
  T_rsc_success( sc );
  T_eq_u32( prio, BM_PRIO_HIGH );

StartLog: |
  T_thread_switch_log *log;
  log = T_thread_switch_record_4( &ctx->thread_switch_log );

CheckPreemption: |
  log = &ctx->thread_switch_log;
  T_eq_sz( log->header.recorded, 2 );
  T_eq_u32( log->events[ 0 ].heir, ctx->runner_id );
  T_eq_u32( log->events[ 1 ].heir, ctx->worker_id );

CheckNoPreemption: |
  log = &ctx->thread_switch_log;
  T_le_sz( log->header.recorded, 1 );
  for ( size_t i = 0; i < log->header.recorded; ++i ) {
    T_ne_u32( log->events[ i ].executing, ctx->worker_id );
    T_eq_u32( log->events[ i ].heir, ctx->runner_id );
  }

SetProcessor: |
  #if defined(RTEMS_SMP)
  T_eq_u32( rtems_scheduler_get_processor_maximum(), 4 );
  uint32_t processor = {};
  cpu_set_t cpuset;
  CPU_ZERO(&cpuset);
  CPU_SET(processor, &cpuset);
  #endif
