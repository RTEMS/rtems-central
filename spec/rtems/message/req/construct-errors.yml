SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2020, 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
functional-type: action
links:
- role: interface-function
  uid: ../if/construct
post-conditions:
- name: Status
  states:
  - name: Ok
    test-code: |
      T_rsc_success( ctx->status );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/successful:/name}.
  - name: InvAddr
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_ADDRESS );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/invalid-address:/name}.
  - name: InvName
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_NAME );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/invalid-name:/name}.
  - name: InvNum
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_NUMBER );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/invalid-number:/name}.
  - name: InvSize
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_SIZE );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/invalid-size:/name}.
  - name: TooMany
    test-code: |
      T_rsc( ctx->status, RTEMS_TOO_MANY );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/too-many:/name}.
  - name: Unsat
    test-code: |
      T_rsc( ctx->status, RTEMS_UNSATISFIED  );
    text: |
      The return status of ${../if/construct:/name} shall be
      ${../../status/if/unsatisfied:/name}.
  test-epilogue: null
  test-prologue: null
- name: Name
  states:
  - name: Valid
    test-code: |
      id = 0;
      sc = rtems_message_queue_ident( NAME, RTEMS_SEARCH_LOCAL_NODE, &id );
      T_rsc_success( sc );
      T_eq_u32( id, ctx->id_value );
    text: |
      The unique object name shall identify the message queue constructed by
      the ${../if/construct:/name} call.
  - name: Invalid
    test-code: |
      sc = rtems_message_queue_ident( NAME, RTEMS_SEARCH_LOCAL_NODE, &id );
      T_rsc( sc, RTEMS_INVALID_NAME );
    text: |
      The unique object name shall not identify a message queue.
  test-epilogue: null
  test-prologue: |
    rtems_status_code sc;
    rtems_id          id;
- name: IdValue
  states:
  - name: Assigned
    test-code: |
      T_eq_ptr( ctx->id, &ctx->id_value );
      T_ne_u32( ctx->id_value, INVALID_ID );
    text: |
      The value of the object identifier variable shall be equal to the object
      identifier of the message queue constructed by the
      ${../if/construct:/name} call.
  - name: Unchanged
    test-code: |
      T_eq_u32( ctx->id_value, INVALID_ID );
    text: |
      The value of the object identifier variable shall be unchanged by the
      ${../if/construct:/name} call.
  test-epilogue: null
  test-prologue: null
pre-conditions:
- name: Id
  states:
  - name: Id
    test-code: |
      ctx->id = &ctx->id_value;
    text: |
      The id parameter shall reference an object identifier value.
  - name: 'Null'
    test-code: |
      ctx->id = NULL;
    text: |
      The id parameter shall be NULL.
  test-epilogue: null
  test-prologue: null
- name: Name
  states:
  - name: Valid
    test-code: |
      ctx->config.name = NAME;
    text: |
      The name of the message queue configuration shall be valid.
  - name: Invalid
    test-code: |
      ctx->config.name = 0;
    text: |
      The name of the message queue configuration shall be invalid.
  test-epilogue: null
  test-prologue: null
- name: MaxPending
  states:
  - name: Valid
    test-code: |
      ctx->config.maximum_pending_messages = MAX_PENDING_MESSAGES;
    text: |
      The maximum number of pending messages of the message queue configuration
      shall be valid.
  - name: Zero
    test-code: |
      ctx->config.maximum_pending_messages = 0;
    text: |
      The maximum number of pending messages of the message queue configuration
      shall be zero.
  - name: Big
    test-code: |
      ctx->config.maximum_pending_messages = UINT32_MAX;
    text: |
      The maximum number of pending messages of the message queue configuration
      shall be big enough so that a calculation to get the message buffer
      storage area size overflows.
  test-epilogue: null
  test-prologue: null
- name: MaxSize
  states:
  - name: Valid
    test-code: |
      if ( ctx->config.maximum_pending_messages == UINT32_MAX ) {
        /*
         * At least on 64-bit systems we need a bit of help to ensure that we
         * meet the Big state of the MaxPending pre-condition.  The following
         * message size is valid with respect to calculations involving only
         * the message size.
         */
        ctx->config.maximum_message_size = SIZE_MAX - sizeof( uintptr_t ) +
          1 - sizeof( CORE_message_queue_Buffer );
      } else {
        ctx->config.maximum_message_size = MAX_MESSAGE_SIZE;
      }
    text: |
      The maximum message size of the message queue configuration shall be
      valid.
  - name: Zero
    test-code: |
      ctx->config.maximum_message_size = 0;
    text: |
      The maximum message size of the message queue configuration shall be
      zero.
  - name: Big
    test-code: |
      ctx->config.maximum_message_size = SIZE_MAX;
    text: |
      The maximum message size of the message queue configuration
      shall be big enough so that a calculation to get the message buffer
      storage area size overflows.
  test-epilogue: null
  test-prologue: null
- name: Free
  states:
  - name: 'Yes'
    test-code: |
      /* Nothing to do */
    text: |
      The system shall have at least one inactive message queue object
      available.
  - name: 'No'
    test-code: |
      i = 0;
      ctx->seized_objects = T_seize_objects( Create, &i );
    text: |
      The system shall have no inactive message queue object available.
  test-epilogue: null
  test-prologue: |
    size_t i;
- name: Area
  states:
  - name: Valid
    test-code: |
      ctx->config.storage_area = buffers;
    text: |
      The message buffer storage area begin pointer of the message queue
      configuration shall be valid.
  - name: 'Null'
    test-code: |
      ctx->config.storage_area = NULL;
    text: |
      The message buffer storage area begin pointer of the message queue
      configuration shall be NULL.
  test-epilogue: null
  test-prologue: null
- name: AreaSize
  states:
  - name: Valid
    test-code: |
      ctx->config.storage_size = sizeof( buffers );
    text: |
      The message buffer storage area size of the message queue configuration
      shall be valid.
  - name: Invalid
    test-code: |
      ctx->config.storage_size = SIZE_MAX;
    text: |
      The message buffer storage area size of the message queue configuration
      shall be invalid.
  test-epilogue: null
  test-prologue: null
rationale: null
references: []
requirement-type: functional
skip-reasons: {}
test-action: |
  ctx->status = rtems_message_queue_construct( &ctx->config, ctx->id );
test-brief: null
test-cleanup: |
  if ( ctx->id_value != INVALID_ID ) {
    rtems_status_code sc;

    sc = rtems_message_queue_delete( ctx->id_value );
    T_rsc_success( sc );

    ctx->id_value = INVALID_ID;
  }

  T_surrender_objects( &ctx->seized_objects, rtems_message_queue_delete );
test-context:
- brief: null
  description: null
  member: |
    rtems_status_code status
- brief: null
  description: null
  member: |
    rtems_message_queue_config config
- brief: null
  description: null
  member: |
    rtems_id *id
- brief: null
  description: null
  member: |
    rtems_id id_value
- brief: null
  description: null
  member: |
    void *seized_objects
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems.h
- string.h
test-local-includes: []
test-prepare: |
  ctx->id_value = INVALID_ID;
  memset( &ctx->config, 0, sizeof( ctx->config ) );
test-setup: null
test-stop: null
test-support: |
  #define NAME rtems_build_name( 'T', 'E', 'S', 'T' )

  #define INVALID_ID 0xffffffff

  #define MAX_MESSAGE_QUEUES 4

  #define MAX_PENDING_MESSAGES 1

  #define MAX_MESSAGE_SIZE 1

  static RTEMS_MESSAGE_QUEUE_BUFFER( MAX_MESSAGE_SIZE )
    buffers_to_seize[ MAX_MESSAGE_QUEUES ][ MAX_PENDING_MESSAGES ];

  static RTEMS_MESSAGE_QUEUE_BUFFER( MAX_MESSAGE_SIZE )
    buffers[ MAX_PENDING_MESSAGES ];

  static rtems_status_code Create( void *arg, uint32_t *id )
  {
    rtems_message_queue_config config;
    size_t                    *i;

    i = arg;
    T_quiet_lt_sz( *i, MAX_MESSAGE_QUEUES );

    memset( &config, 0, sizeof( config ) );
    config.name = rtems_build_name( 'S', 'I', 'Z', 'E' );
    config.maximum_pending_messages = MAX_PENDING_MESSAGES;
    config.maximum_message_size = MAX_MESSAGE_SIZE;
    config.storage_size = sizeof( buffers_to_seize[ *i ] );
    config.storage_area = buffers_to_seize[ *i ];
    config.attributes = RTEMS_DEFAULT_ATTRIBUTES;

    ++(*i);

    return rtems_message_queue_construct( &config, id );
  }
test-target: testsuites/validation/tc-message-construct-errors.c
test-teardown: null
text: ${.:text-template}
transition-map:
- enabled-by: true
  post-conditions:
    Status: Ok
    Name: Valid
    IdValue: Assigned
  pre-conditions:
    Area:
    - Valid
    AreaSize:
    - Valid
    Id:
    - Id
    MaxPending:
    - Valid
    MaxSize:
    - Valid
    Name:
    - Valid
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: InvName
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area: all
    AreaSize: all
    Id: all
    MaxPending: all
    MaxSize: all
    Name:
    - Invalid
    Free: all
- enabled-by: true
  post-conditions:
    Status: InvAddr
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area: all
    AreaSize: all
    Id:
    - 'Null'
    MaxPending: all
    MaxSize: all
    Name:
    - Valid
    Free: all
- enabled-by: true
  post-conditions:
    Status: InvNum
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area: all
    AreaSize: all
    Id:
    - Id
    MaxPending:
    - Zero
    MaxSize: all
    Name:
    - Valid
    Free: all
- enabled-by: true
  post-conditions:
    Status: InvSize
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area: all
    AreaSize: all
    Id:
    - Id
    MaxPending:
    - Valid
    - Big
    MaxSize:
    - Zero
    Name:
    - Valid
    Free: all
- enabled-by: true
  post-conditions:
    Status: TooMany
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area: all
    AreaSize: all
    Id:
    - Id
    MaxPending:
    - Valid
    - Big
    MaxSize:
    - Valid
    - Big
    Name:
    - Valid
    Free:
    - 'No'
- enabled-by: true
  post-conditions:
    Status: InvNum
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area: all
    AreaSize: all
    Id:
    - Id
    MaxPending:
    - Big
    MaxSize:
    - Valid
    Name:
    - Valid
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: InvSize
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area: all
    AreaSize: all
    Id:
    - Id
    MaxPending:
    - Valid
    - Big
    MaxSize:
    - Big
    Name:
    - Valid
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: Unsat
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area:
    - 'Null'
    AreaSize: all
    Id:
    - Id
    MaxPending:
    - Valid
    MaxSize:
    - Valid
    Name:
    - Valid
    Free:
    - 'Yes'
- enabled-by: true
  post-conditions:
    Status: Unsat
    Name: Invalid
    IdValue: Unchanged
  pre-conditions:
    Area:
    - Valid
    AreaSize:
    - Invalid
    Id:
    - Id
    MaxPending:
    - Valid
    MaxSize:
    - Valid
    Name:
    - Valid
    Free:
    - 'Yes'
type: requirement
