SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: RTEMS_SMP
limits:
  sparc/gr712rc/smp/qual-only/5zrudgccHYC6azWEU3SRYUnkVXCeq9MufBd5zmfMeEg=:
    DirtyCache:
      max-upper-bound: 0.000104
      median-lower-bound: 2.6e-05
      median-upper-bound: 0.000104
      min-lower-bound: 2.6e-05
    FullCache:
      max-upper-bound: 0.000102
      median-lower-bound: 2.55e-05
      median-upper-bound: 0.000102
      min-lower-bound: 2.5e-05
    HotCache:
      max-upper-bound: 0.000102
      median-lower-bound: 2.55e-05
      median-upper-bound: 0.000102
      min-lower-bound: 2.5e-05
    Load/1:
      max-upper-bound: 0.000114
      median-lower-bound: 2.8e-05
      median-upper-bound: 0.000112
      min-lower-bound: 2.8e-05
    Load/2:
      max-upper-bound: 0.000114
      median-lower-bound: 2.8e-05
      median-upper-bound: 0.000112
      min-lower-bound: 2.8e-05
  sparc/gr712rc/smp/qual-only/NDvyW8PTjD_thgV3P8TV_7MXVFP9EFvrevMzUX574lY=:
    DirtyCache:
      max-upper-bound: 0.000254
      median-lower-bound: 6.35e-05
      median-upper-bound: 0.000254
      min-lower-bound: 6.35e-05
    FullCache:
      max-upper-bound: 0.000144
      median-lower-bound: 2.2e-05
      median-upper-bound: 8.8e-05
      min-lower-bound: 2.2e-05
    HotCache:
      max-upper-bound: 8.2e-05
      median-lower-bound: 2.0e-05
      median-upper-bound: 8.0e-05
      min-lower-bound: 2.0e-05
    Load/1:
      max-upper-bound: 0.000252
      median-lower-bound: 6.3e-05
      median-upper-bound: 0.000252
      min-lower-bound: 6.25e-05
    Load/2:
      max-upper-bound: 0.000254
      median-lower-bound: 6.3e-05
      median-upper-bound: 0.000252
      min-lower-bound: 6.25e-05
  sparc/gr740/smp/qual-only/_xQeTNJwSla2bVbhWPVcI0emLk2bE_GVQfvzt9CN84k=:
    DirtyCache:
      max-upper-bound: 9.896e-05
      median-lower-bound: 2.474e-05
      median-upper-bound: 9.896e-05
      min-lower-bound: 2.466e-05
    FullCache:
      max-upper-bound: 9.724e-05
      median-lower-bound: 2.427e-05
      median-upper-bound: 9.708e-05
      min-lower-bound: 2.414e-05
    HotCache:
      max-upper-bound: 9.712e-05
      median-lower-bound: 2.428e-05
      median-upper-bound: 9.712e-05
      min-lower-bound: 2.412e-05
    Load/1:
      max-upper-bound: 0.00010684
      median-lower-bound: 2.671e-05
      median-upper-bound: 0.00010684
      min-lower-bound: 2.671e-05
    Load/2:
      max-upper-bound: 0.00010708
      median-lower-bound: 2.677e-05
      median-upper-bound: 0.00010708
      min-lower-bound: 2.677e-05
    Load/3:
      max-upper-bound: 0.000107
      median-lower-bound: 2.675e-05
      median-upper-bound: 0.000107
      min-lower-bound: 2.675e-05
    Load/4:
      max-upper-bound: 0.000107
      median-lower-bound: 2.675e-05
      median-upper-bound: 0.000107
      min-lower-bound: 2.675e-05
  sparc/gr740/smp/qual-only/c1ZkBOsUIJ-siPI7pK7knk0z6uni1pxOFlZ2eLDflYc=:
    DirtyCache:
      max-upper-bound: 9.6896e-05
      median-lower-bound: 2.2452e-05
      median-upper-bound: 8.9808e-05
      min-lower-bound: 2.2332e-05
    FullCache:
      max-upper-bound: 5.752e-05
      median-lower-bound: 9.792e-06
      median-upper-bound: 3.9168e-05
      min-lower-bound: 9.768e-06
    HotCache:
      max-upper-bound: 1.9096e-05
      median-lower-bound: 4.774e-06
      median-upper-bound: 1.9096e-05
      min-lower-bound: 4.774e-06
    Load/1:
      max-upper-bound: 0.000118752
      median-lower-bound: 2.1774e-05
      median-upper-bound: 8.7096e-05
      min-lower-bound: 2.1704e-05
    Load/2:
      max-upper-bound: 0.000116392
      median-lower-bound: 2.1798e-05
      median-upper-bound: 8.7192e-05
      min-lower-bound: 2.1674e-05
    Load/3:
      max-upper-bound: 0.000549704
      median-lower-bound: 0.000118466
      median-upper-bound: 0.000473864
      min-lower-bound: 0.000118102
    Load/4:
      max-upper-bound: 0.00082376
      median-lower-bound: 0.000177756
      median-upper-bound: 0.000711024
      min-lower-bound: 0.000176602
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Move the worker to scheduler A.
  code: |
    ctx->begin = T_tick();
    ctx->status = rtems_task_set_scheduler(
      ctx->worker_id,
      SCHEDULER_A_ID,
      PRIO_HIGH
    );
  description: null
test-cleanup:
  brief: |
    Delete the worker tasks.
  code: |
    ResumeTask( ctx->worker_2_id );
    DeleteTask( ctx->worker_2_id );
    DeleteTask( ctx->worker_id );
  description: null
test-prepare:
  brief: |
    Create and start two worker tasks for scheduler B.  Make the second worker
    busy.
  code: |
    ctx->worker_id = CreateTask( "WORK", PRIO_NORMAL );
    SetScheduler( ctx->worker_id, SCHEDULER_B_ID, PRIO_NORMAL );
    StartTask( ctx->worker_id, Worker, ctx );
    Send( ctx, EVENT_SET_END );
    WaitForNextTask( 1, ctx->worker_id );

    ctx->worker_2_id = CreateTask( "WRK2", PRIO_NORMAL );
    SetScheduler( ctx->worker_2_id, SCHEDULER_B_ID, PRIO_HIGH );
    StartTask( ctx->worker_2_id, Worker, ctx );
    SendEvents( ctx->worker_2_id, EVENT_BUSY );
    SuspendTask( ctx->worker_2_id );
  description: null
test-setup:
  brief: |
    Move the worker to scheduler B.  Make the worker ready to set the end time.
  code: |
    ResumeTask( ctx->worker_2_id );
    SetScheduler( ctx->worker_id, SCHEDULER_B_ID, PRIO_NORMAL );
    Send( ctx, EVENT_SET_END );
  description: null
test-teardown:
  brief: |
    Set the measured runtime.  Discard samples interrupted by a clock tick.
  code: |
    T_quiet_rsc_success( ctx->status );

    *delta = ctx->end - ctx->begin;
    SuspendTask( ctx->worker_2_id );

    return tic == toc;
  description: null
text: |
  Let U and V be two tasks with the distinct home schedulers.  Let
  :math:`B` be a time point measured by U right before a call to
  ${../if/set-scheduler:/name} which moves task V to the home scheduler of
  U which preempts the caller.  Let :math:`E` be a time point measured by
  V right after the first context switch after :math:`B`.

  While the execution environment is ${.:/environment}, while the measurement
  sample is :math:`E - B`, when exactly ${../val/perf:/params/sample-count}
  samples are collected, the ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
