SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: RTEMS_SMP
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Automatically release the barrier.
  code: |
    ctx->begin = T_tick();
    ctx->status = rtems_barrier_wait( ctx->barrier_id, RTEMS_NO_TIMEOUT );
  description: null
test-cleanup:
  brief: |
    Delete the barrier and the worker.
  code: |
    rtems_status_code sc;

    DeleteTask( ctx->worker_id );

    sc = rtems_barrier_delete( ctx->barrier_id );
    T_rsc_success( sc );
  description: null
test-prepare:
  brief: |
    Create an automatic release barrier.  Create and start a worker task.
  code: |
    rtems_status_code sc;

    sc = rtems_barrier_create(
      OBJECT_NAME,
      RTEMS_BARRIER_AUTOMATIC_RELEASE,
      2,
      &ctx->barrier_id
    );
    T_rsc_success( sc );

    ctx->worker_id = CreateTask( "WORK", PRIO_NORMAL );
    SetScheduler( ctx->worker_id, SCHEDULER_B_ID, PRIO_NORMAL );
    StartTask( ctx->worker_id, BarrierWaitWorker, ctx );
    WaitForNextTask( 1, ctx->worker_id );
  description: null
test-setup: null
test-teardown:
  brief: |
    Make sure the worker waits for the next event.  Set the measured runtime.
    Discard samples interrupted by a clock tick.
  code: |
    T_quiet_rsc_success( ctx->status );

    WaitForNextTask( 1, ctx->worker_id );
    *delta = ctx->end - ctx->begin;

    return tic == toc;
  description: null
text: |
  Let U and V be two tasks with distinct home schedulers.  Let :math:`B`
  be a time point measured by U right before a call to ${../if/wait:/name}
  which automatically releases the barrier.  Let :math:`E` be a time point
  measured by V right after a call to ${../if/wait:/name} returns
  successfully due to the ${../if/wait:/name} call associated with :math:`B`.
  While the execution environment is ${.:/environment}, while the barrier is an
  automatic release barrier, while the measurement sample is :math:`E - B`,
  when exactly ${../val/perf:/params/sample-count} samples are collected, the
  ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
