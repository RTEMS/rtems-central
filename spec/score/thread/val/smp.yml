SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: RTEMS_SMP
links: []
test-actions:
- action-brief: |
    Create three worker threads and a mutex.  Use the mutex and the worker to
    move to a helping scheduler.
  action-code: |
    rtems_status_code sc;
    Per_CPU_Control  *cpu_self;
    Thread_Control   *executing;

    executing = _Thread_Get_executing();
    SetSelfPriority( PRIO_NORMAL );
    ctx->counter = 0;

    sc = rtems_scheduler_ident( TEST_SCHEDULER_A_NAME, &ctx->scheduler_a_id );
    T_rsc_success( sc );

    sc = rtems_scheduler_ident( TEST_SCHEDULER_B_NAME, &ctx->scheduler_b_id );
    T_rsc_success( sc );

    ctx->mutex_id = CreateMutex();

    ctx->worker_a_id = CreateTask( "WRKA", PRIO_NORMAL );
    SetScheduler( ctx->worker_a_id, ctx->scheduler_b_id, PRIO_NORMAL );
    StartTask( ctx->worker_a_id, WorkerTask, ctx );

    ctx->worker_b_id = CreateTask( "WRKB", PRIO_HIGH );
    StartTask( ctx->worker_b_id, WorkerTask, ctx );

    ctx->worker_c_id = CreateTask( "WRKC", PRIO_LOW );
    StartTask( ctx->worker_c_id, WorkerTask, ctx );

    ObtainMutex( ctx->mutex_id );
    SendEvents( ctx->worker_a_id, EVENT_OBTAIN | EVENT_RELEASE );

    ctx->busy = true;
    SendEvents( ctx->worker_b_id, EVENT_BUSY );
  checks:
  - brief: |
      Pin the runner thread while it executes on a processor owned by a
      helping scheduler.
    code: |
      T_eq_u32( rtems_scheduler_get_processor(), 1 );
      _Thread_Pin( executing );
    links:
    - role: validation
      uid: ../req/pinning-helping
  - brief: |
      Pin and unpin the runner thread.  This is a nested operation.
    code: |
      T_eq_u32( rtems_scheduler_get_processor(), 1 );
      _Thread_Pin( executing );
      _Thread_Unpin( executing, _Per_CPU_Get_snapshot() );
    links:
    - role: validation
      uid: ../req/pinning-nested
  - brief: |
      Preempt the pinned runner thread.  Worker B and C execute at the same
      time on processor 0 and 1 respectively for some point in time.  This
      shows that the pinning of the runner thread is maintained.
    code: |
      ctx->busy = false;
      SetScheduler( ctx->worker_b_id, ctx->scheduler_b_id, PRIO_HIGH );
      SendEvents( ctx->worker_b_id, EVENT_LET_WORKER_C_COUNT );

      T_eq_u32( rtems_scheduler_get_processor(), 1 );
      T_eq_u32( ctx->counter, 1 );
    links:
    - role: validation
      uid: ../req/pinning-preemptible
  - brief: |
      Unpin the runner thread.  The runner moves back to its home scheduler.
    code: |
      cpu_self = _Thread_Dispatch_disable();
      _Thread_Unpin( executing, cpu_self );
      _Thread_Dispatch_direct( cpu_self );

      T_eq_u32( rtems_scheduler_get_processor(), 0 );
    links:
    - role: validation
      uid: ../req/pinning-nested
  - brief: |
      Release the mutex.
    code: |
      ReleaseMutex( ctx->mutex_id);
      T_eq_u32( rtems_scheduler_get_processor(), 0 );
    links: []
  - brief: |
      Pin the runner thread.  Unpin the runner thread while it is suspended.
    code: |
      _Thread_Pin( executing );

      cpu_self = _Thread_Dispatch_disable();
      CallWithinISR( Suspend, executing );
      _Thread_Unpin( executing, cpu_self );
      CallWithinISR( Resume, executing );
      _Thread_Dispatch_direct( cpu_self );
    links:
    - role: validation
      uid: ../req/pinning-unpin-suspended
  - brief: |
      Make sure the worker released the mutex.
    code: |
      SetSelfScheduler( ctx->scheduler_b_id, PRIO_LOW );
      SetSelfScheduler( ctx->scheduler_a_id, PRIO_NORMAL );
    links: []
  - brief: |
      Clean up all used resources.
    code: |
      DeleteTask( ctx->worker_a_id );
      DeleteTask( ctx->worker_b_id );
      DeleteTask( ctx->worker_c_id );
      DeleteMutex( ctx->mutex_id );
      RestoreRunnerPriority();
    links: []
  links: []
test-brief: |
  Tests SMP-specific thread behaviour.
test-context:
- brief: |
    This member contains the scheduler A identifier.
  description: null
  member: |
    rtems_id scheduler_a_id
- brief: |
    This member contains the scheduler B identifier.
  description: null
  member: |
    rtems_id scheduler_b_id
- brief: |
    This member contains the worker A identifier.
  description: null
  member: |
    rtems_id worker_a_id
- brief: |
    This member contains the worker B identifier.
  description: null
  member: |
    rtems_id worker_b_id
- brief: |
    This member contains the worker C identifier.
  description: null
  member: |
    rtems_id worker_c_id
- brief: |
    This member contains the mutex identifier.
  description: null
  member: |
    rtems_id mutex_id
- brief: |
    If this member is true, then the worker shall busy wait.
  description: null
  member: |
    volatile bool busy
- brief: |
    This member contains a counter for EVENT_COUNT.
  description: null
  member: |
    volatile uint32_t counter
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems.h
- rtems/score/threadimpl.h
test-local-includes:
- ts-config.h
- tx-support.h
test-setup: null
test-stop: null
test-support: |
  typedef ${.:/test-context-type} Context;

  typedef enum {
    EVENT_OBTAIN = RTEMS_EVENT_0,
    EVENT_RELEASE = RTEMS_EVENT_1,
    EVENT_BUSY = RTEMS_EVENT_2,
    EVENT_COUNT = RTEMS_EVENT_3,
    EVENT_LET_WORKER_C_COUNT = RTEMS_EVENT_4
  } Event;

  static void WorkerTask( rtems_task_argument arg )
  {
    Context *ctx;

    ctx = (Context *) arg;

    while ( true ) {
      rtems_event_set events;

      events = ReceiveAnyEvents();

      if ( ( events & EVENT_OBTAIN ) != 0 ) {
        ObtainMutex( ctx->mutex_id );
      }

      if ( ( events & EVENT_RELEASE ) != 0 ) {
        ReleaseMutex( ctx->mutex_id );
      }

      if ( ( events & EVENT_BUSY ) != 0 ) {
        while ( ctx->busy ) {
          /* Do nothing */
        }
      }

      if ( ( events & EVENT_COUNT ) != 0 ) {
        ++ctx->counter;
      }

      if ( ( events & EVENT_LET_WORKER_C_COUNT ) != 0 ) {
        uint32_t counter;

        counter = ctx->counter;
        SendEvents( ctx->worker_c_id, EVENT_COUNT );

        while ( ctx->counter == counter ) {
          /* Wait */
        }
      }
    }
  }

  static void Suspend( void *arg )
  {
    Thread_Control *thread;

    thread = arg;
    SuspendTask( thread->Object.id );
  }

  static void Resume( void *arg )
  {
    Thread_Control *thread;

    thread = arg;
    ResumeTask( thread->Object.id );
  }
test-target: testsuites/validation/tc-score-smp-thread.c
test-teardown: null
type: test-case
