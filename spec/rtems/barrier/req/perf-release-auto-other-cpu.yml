SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: RTEMS_SMP
limits:
  sparc/gr712rc/smp/qual-only/5zrudgccHYC6azWEU3SRYUnkVXCeq9MufBd5zmfMeEg=:
    DirtyCache:
      max-upper-bound: 9.4e-05
      median-lower-bound: 2.3e-05
      median-upper-bound: 9.2e-05
      min-lower-bound: 2.25e-05
    FullCache:
      max-upper-bound: 9.2e-05
      median-lower-bound: 2.25e-05
      median-upper-bound: 9.0e-05
      min-lower-bound: 2.2e-05
    HotCache:
      max-upper-bound: 9.0e-05
      median-lower-bound: 2.2e-05
      median-upper-bound: 8.8e-05
      min-lower-bound: 2.2e-05
    Load/1:
      max-upper-bound: 0.000102
      median-lower-bound: 2.55e-05
      median-upper-bound: 0.000102
      min-lower-bound: 2.5e-05
    Load/2:
      max-upper-bound: 0.000102
      median-lower-bound: 2.5e-05
      median-upper-bound: 0.0001
      min-lower-bound: 2.45e-05
  sparc/gr712rc/smp/qual-only/NDvyW8PTjD_thgV3P8TV_7MXVFP9EFvrevMzUX574lY=:
    DirtyCache:
      max-upper-bound: 0.000242
      median-lower-bound: 6.0e-05
      median-upper-bound: 0.00024
      min-lower-bound: 5.95e-05
    FullCache:
      max-upper-bound: 0.000172
      median-lower-bound: 2.0e-05
      median-upper-bound: 8.0e-05
      min-lower-bound: 2.0e-05
    HotCache:
      max-upper-bound: 8.0e-05
      median-lower-bound: 2.0e-05
      median-upper-bound: 8.0e-05
      min-lower-bound: 1.95e-05
    Load/1:
      max-upper-bound: 0.000238
      median-lower-bound: 5.9e-05
      median-upper-bound: 0.000236
      min-lower-bound: 5.9e-05
    Load/2:
      max-upper-bound: 0.000272
      median-lower-bound: 6.75e-05
      median-upper-bound: 0.00027
      min-lower-bound: 6.7e-05
  sparc/gr740/smp/qual-only/_xQeTNJwSla2bVbhWPVcI0emLk2bE_GVQfvzt9CN84k=:
    DirtyCache:
      max-upper-bound: 8.752e-05
      median-lower-bound: 2.147e-05
      median-upper-bound: 8.588e-05
      min-lower-bound: 2.133e-05
    FullCache:
      max-upper-bound: 8.468e-05
      median-lower-bound: 2.108e-05
      median-upper-bound: 8.432e-05
      min-lower-bound: 2.097e-05
    HotCache:
      max-upper-bound: 8.604e-05
      median-lower-bound: 2.1e-05
      median-upper-bound: 8.4e-05
      min-lower-bound: 2.091e-05
    Load/1:
      max-upper-bound: 9.58e-05
      median-lower-bound: 2.376e-05
      median-upper-bound: 9.504e-05
      min-lower-bound: 2.342e-05
    Load/2:
      max-upper-bound: 9.568e-05
      median-lower-bound: 2.343e-05
      median-upper-bound: 9.372e-05
      min-lower-bound: 2.323e-05
    Load/3:
      max-upper-bound: 9.568e-05
      median-lower-bound: 2.345e-05
      median-upper-bound: 9.38e-05
      min-lower-bound: 2.323e-05
    Load/4:
      max-upper-bound: 9.488e-05
      median-lower-bound: 2.35e-05
      median-upper-bound: 9.4e-05
      min-lower-bound: 2.319e-05
  sparc/gr740/smp/qual-only/c1ZkBOsUIJ-siPI7pK7knk0z6uni1pxOFlZ2eLDflYc=:
    DirtyCache:
      max-upper-bound: 9.9392e-05
      median-lower-bound: 2.0706e-05
      median-upper-bound: 8.2824e-05
      min-lower-bound: 2.0528e-05
    FullCache:
      max-upper-bound: 7.3736e-05
      median-lower-bound: 8.634e-06
      median-upper-bound: 3.4536e-05
      min-lower-bound: 8.504e-06
    HotCache:
      max-upper-bound: 1.9168e-05
      median-lower-bound: 4.614e-06
      median-upper-bound: 1.8456e-05
      min-lower-bound: 4.614e-06
    Load/1:
      max-upper-bound: 0.000125128
      median-lower-bound: 1.9982e-05
      median-upper-bound: 7.9928e-05
      min-lower-bound: 1.9758e-05
    Load/2:
      max-upper-bound: 0.000440768
      median-lower-bound: 0.00011001
      median-upper-bound: 0.00044004
      min-lower-bound: 0.000107924
    Load/3:
      max-upper-bound: 0.000752952
      median-lower-bound: 0.00018604
      median-upper-bound: 0.00074416
      min-lower-bound: 0.0001854
    Load/4:
      max-upper-bound: 0.000955088
      median-lower-bound: 0.00023813
      median-upper-bound: 0.00095252
      min-lower-bound: 0.000235894
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Automatically release the barrier.
  code: |
    ctx->begin = T_tick();
    ctx->status = rtems_barrier_wait( ctx->barrier_id, RTEMS_NO_TIMEOUT );
  description: null
test-cleanup:
  brief: |
    Delete the barrier and the worker.
  code: |
    rtems_status_code sc;

    DeleteTask( ctx->worker_id );

    sc = rtems_barrier_delete( ctx->barrier_id );
    T_rsc_success( sc );
  description: null
test-prepare:
  brief: |
    Create an automatic release barrier.  Create and start a worker task.
  code: |
    rtems_status_code sc;

    sc = rtems_barrier_create(
      OBJECT_NAME,
      RTEMS_BARRIER_AUTOMATIC_RELEASE,
      2,
      &ctx->barrier_id
    );
    T_rsc_success( sc );

    ctx->worker_id = CreateTask( "WORK", PRIO_NORMAL );
    SetScheduler( ctx->worker_id, SCHEDULER_B_ID, PRIO_NORMAL );
    StartTask( ctx->worker_id, BarrierWaitWorker, ctx );
    WaitForNextTask( 1, ctx->worker_id );
  description: null
test-setup: null
test-teardown:
  brief: |
    Make sure the worker waits for the next event.  Set the measured runtime.
    Discard samples interrupted by a clock tick.
  code: |
    T_quiet_rsc_success( ctx->status );

    WaitForNextTask( 1, ctx->worker_id );
    *delta = ctx->end - ctx->begin;

    return tic == toc;
  description: null
text: |
  Let U and V be two tasks with distinct home schedulers.  Let :math:`B`
  be a time point measured by U right before a call to ${../if/wait:/name}
  which automaticall releases the barrier.  Let :math:`E` be a time point
  measured by V right after a call to ${../if/wait:/name} returns
  successfully due to the ${../if/wait:/name} call associated with :math:`B`.
  While the execution environment is ${.:/environment}, while the barrier is an
  automatic release barrier, while the measurement sample is :math:`E - B`,
  when exactly ${../val/perf:/params/sample-count} samples are collected, the
  ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
