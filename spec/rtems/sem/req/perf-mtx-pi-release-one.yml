SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH & Co. KG
enabled-by: true
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Release the mutex.
  code: |
    /*
     * The release will unblock the worker task which has our priority.  The
     * scheduler ensures FIFO ordering for ready threads of the same priority, so
     * the release will not preempt us.
     */
    ctx->status = rtems_semaphore_release( ctx->mutex_id );
  description: null
test-cleanup: null
test-prepare: null
test-setup:
  brief: |
    Let one task wait on the mutex.
  code: |
    SetSelfPriority( PRIO_HIGH );
    ObtainMutex( ctx->mutex_id );
    Send( ctx, EVENT_OBTAIN );
    Yield();
    Send( ctx, EVENT_RELEASE );
  description: null
test-teardown:
  brief: |
    Restore the worker priority.  Discard samples interrupted by a clock tick.
  code: |
    T_quiet_rsc( ctx->status, RTEMS_SUCCESSFUL );

    SetSelfPriority( PRIO_NORMAL );

    return tic == toc;
  description: null
text: |
  While the execution environment is ${.:/environment}, while the semaphore is
  a priority inheritance mutex, while the measurement sample is the runtime of
  exactly one successful call to ${../if/release:/name} which does unblock
  exactly one waiting task which does not preempt the caller, when exactly
  ${../val/perf:/params/sample-count} samples are collected, the
  ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
