SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: RTEMS_SMP
links: []
test-actions:
- action-brief: |
    Validate the interrupt lock directives.
  action-code: |
    struct {
      int a;
      RTEMS_INTERRUPT_LOCK_MEMBER( member )
      int b;
    } lock = {
      .member = RTEMS_INTERRUPT_LOCK_INITIALIZER( "name" )
    };

    RTEMS_INTERRUPT_LOCK_REFERENCE( ref, &the_lock )
    rtems_interrupt_lock_context lock_context;
  checks:
  - brief: |
      Check that ${../if/lock-reference:/name} expanded to a lock reference
      definition.  Check that the lock is available after static
      initialization.
    code: |
      T_true( ISRLockIsAvailable( ref ) );
    links:
    - role: validation
      uid: ../req/lock-reference-identifier
    - role: validation
      uid: ../req/lock-reference-target
    - role: validation
      uid: ../req/lock-reference-type
  - brief: |
      Check that the lock is available after initialization.
    code: |
      T_true( ISRLockIsAvailable( &lock.member ) );
    links:
    - role: validation
      uid: ../req/lock-initializer
  - brief: |
      Check that maskable interrupts are disabled before the call to
      ${../if/lock-isr-disable:/name} and disabled afterwards.
    code: |
      T_true( AreInterruptsEnabled() );
      T_true( ISRLockIsAvailable( &lock.member ) );
      rtems_interrupt_lock_interrupt_disable( &lock_context );
      T_false( AreInterruptsEnabled() );
      T_true( ISRLockIsAvailable( &lock.member ) );
    links:
    - role: validation
      uid: ../if/lock-isr-disable
    - role: validation
      uid: ../req/disable-interrupts
    - role: validation
      uid: ../req/lock-store-interrupt-status
  - brief: |
      Check that the maskable interrupt status is not changed by the
      ${../if/lock-acquire-isr:/name} call.  Check that the lock is no longer
      available.
    code: |
      T_false( AreInterruptsEnabled() );
      T_true( ISRLockIsAvailable( &lock.member ) );
      rtems_interrupt_lock_acquire_isr( &lock.member, &lock_context );
      T_false( AreInterruptsEnabled() );
      T_false( ISRLockIsAvailable( &lock.member ) );
    links:
    - role: validation
      uid: ../req/lock-acquire
  - brief: |
      Check that the maskable interrupt status is restored by the call to
      ${../if/lock-release:/name} according to the
      ${../if/lock-release:/params[1]/name} parameter.  Check that the lock is
      available afterwards.
    code: |
      T_false( AreInterruptsEnabled() );
      T_false( ISRLockIsAvailable( &lock.member ) );
      rtems_interrupt_lock_release( &lock.member, &lock_context );
      T_true( AreInterruptsEnabled() );
      T_true( ISRLockIsAvailable( &lock.member ) );
    links:
    - role: validation
      uid: ../req/lock-release
    - role: validation
      uid: ../req/lock-restore-interrupts
  - brief: |
      Check that the maskable interrupt status is not changed by the
      ${../if/lock-destroy:/name} call.
    code: |
      T_true( AreInterruptsEnabled() );
      rtems_interrupt_lock_destroy( &lock.member );
      T_true( AreInterruptsEnabled() );
    links:
    - role: validation
      uid: ../req/lock-destroy
  - brief: |
      Initialize the lock using ${../if/lock-initialize:/name}.  Check that the
      lock is available after initialization.
    code: |
      rtems_interrupt_lock_initialize( &lock.member, "name" );
      T_true( ISRLockIsAvailable( &lock.member ) );
    links:
    - role: validation
      uid: ../req/lock-initialize
  - brief: |
      Check that maskable interrupts are disabled before the call to
      ${../if/lock-acquire:/name} and disabled afterwards.  Check that the lock
      is no longer available.
    code: |
      T_true( AreInterruptsEnabled() );
      T_true( ISRLockIsAvailable( &lock.member ) );
      rtems_interrupt_lock_acquire( &lock.member, &lock_context );
      T_false( AreInterruptsEnabled() );
      T_false( ISRLockIsAvailable( &lock.member ) );
    links:
    - role: validation
      uid: ../if/lock-acquire
    - role: validation
      uid: ../req/disable-interrupts
    - role: validation
      uid: ../req/lock-store-interrupt-status
  - brief: |
      Check that the maskable interrupt status is restored by the call to
      ${../if/lock-release:/name} according to the
      ${../if/lock-release:/params[1]/name} parameter.  Check that the lock is
      available afterwards.
    code: |
      T_false( AreInterruptsEnabled() );
      T_false( ISRLockIsAvailable( &lock.member ) );
      rtems_interrupt_lock_release( &lock.member, &lock_context );
      T_true( AreInterruptsEnabled() );
      T_true( ISRLockIsAvailable( &lock.member ) );
    links:
    - role: validation
      uid: ../req/lock-release
    - role: validation
      uid: ../req/lock-restore-interrupts
  - brief: |
      Check that the maskable interrupt status is not changed by the
      ${../if/lock-destroy:/name} call.
    code: |
      T_true( AreInterruptsEnabled() );
      rtems_interrupt_lock_destroy( &lock.member );
      T_true( AreInterruptsEnabled() );
    links:
    - role: validation
      uid: ../req/lock-destroy
  links:
  - role: validation
    uid: ../req/lock-declare-identifier
  - role: validation
    uid: ../req/lock-declare-specifier
  - role: validation
    uid: ../req/lock-define-identifier
  - role: validation
    uid: ../req/lock-define-specifier
  - role: validation
    uid: ../req/lock-member-identifier
  - role: validation
    uid: ../req/lock-member-type
test-brief: |
  Tests some ${../if/group:/name} directives.
test-context: []
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems.h
test-local-includes:
- tx-support.h
test-setup: null
test-stop: null
test-support: |
  RTEMS_INTERRUPT_LOCK_DECLARE( static, the_lock )
  RTEMS_INTERRUPT_LOCK_DEFINE( static, the_lock, "name " )
test-target: testsuites/validation/tc-intr-smp-only.c
test-teardown: null
type: test-case
