SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by:
  not: RTEMS_SMP
links: []
test-actions:
- action-brief: |
    Validate some interrupt lock macros.
  action-code: |
    const char *s;
  checks:
  - brief: |
      Check that ${../if/lock-declare:/name} expands to white space only.
    code: |
      s = RTEMS_XSTRING( RTEMS_INTERRUPT_LOCK_DECLARE( x, y ) );
      T_true( IsWhiteSpaceOnly( s ) );
    links:
    - role: validation
      uid: ../if/lock-declare
    - role: validation
      uid: ../req/lock-white-space
  - brief: |
      Check that ${../if/lock-define:/name} expands to white space only.
    code: |
      s = RTEMS_XSTRING( RTEMS_INTERRUPT_LOCK_DEFINE( x, y, z ) );
      T_true( IsWhiteSpaceOnly( s ) );
    links:
    - role: validation
      uid: ../if/lock-define
    - role: validation
      uid: ../req/lock-white-space
  - brief: |
      Check that ${../if/lock-member:/name} expands to white space only.
    code: |
      s = RTEMS_XSTRING( RTEMS_INTERRUPT_LOCK_MEMBER( x ) );
      T_true( IsWhiteSpaceOnly( s ) );
    links:
    - role: validation
      uid: ../if/lock-member
    - role: validation
      uid: ../req/lock-white-space
  - brief: |
      Check that ${../if/lock-reference:/name} expands to white space only.
    code: |
      s = RTEMS_XSTRING( RTEMS_INTERRUPT_LOCK_REFERENCE( x, y ) );
      T_true( IsWhiteSpaceOnly( s ) );
    links:
    - role: validation
      uid: ../if/lock-reference
    - role: validation
      uid: ../req/lock-white-space
  - brief: |
      Check that ${../if/lock-destroy:/name} expands to white space only.
    code: |
      s = RTEMS_XSTRING( rtems_interrupt_lock_destroy( x ) );
      T_true( IsWhiteSpaceOnly( s ) );
    links:
    - role: validation
      uid: ../if/lock-destroy
    - role: validation
      uid: ../req/lock-white-space
  - brief: |
      Check that ${../if/lock-initializer:/name} expands to an empty structure
      initializer.
    code: |
      s = RTEMS_XSTRING( RTEMS_INTERRUPT_LOCK_INITIALIZER( x ) );
      T_true( IsEqualIgnoreWhiteSpace( s, "{}" ) );
    links:
    - role: validation
      uid: ../if/lock-initializer
    - role: validation
      uid: ../req/lock-empty-initializer
  - brief: |
      Check that ${../if/lock-initialize:/name} expands to white space only.
    code: |
      s = RTEMS_XSTRING( rtems_interrupt_lock_initialize( x, y ) );
      T_true( IsWhiteSpaceOnly( s ) );
    links:
    - role: validation
      uid: ../if/lock-initialize
    - role: validation
      uid: ../req/lock-white-space
  - brief: |
      Check that ${../if/lock-acquire-isr:/name} expands to a code block which
      marks the second parameter as used.
    code: |
      s = RTEMS_XSTRING( rtems_interrupt_lock_acquire_isr( x, y ) );
      T_true( IsEqualIgnoreWhiteSpace( s, "do{(void)y;}while(0)" ) );
    links:
    - role: validation
      uid: ../if/lock-acquire-isr
    - role: validation
      uid: ../req/lock-use-context
  - brief: |
      Check that ${../if/lock-release-isr:/name} expands to a code block which
      marks the second parameter as used.
    code: |
      s = RTEMS_XSTRING( rtems_interrupt_lock_release_isr( x, y ) );
      T_true( IsEqualIgnoreWhiteSpace( s, "do{(void)y;}while(0)" ) );
    links:
    - role: validation
      uid: ../if/lock-release-isr
    - role: validation
      uid: ../req/lock-use-context
  links: []
test-brief: |
  Tests some ${../if/group:/name} interfaces.
test-context: []
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems.h
test-local-includes:
- tx-support.h
test-setup: null
test-stop: null
test-support: null
test-target: testsuites/validation/tc-intr-non-smp.c
test-teardown: null
type: test-case
