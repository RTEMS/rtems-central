SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Receive a message.  Wait with a timeout.
  code: |
    uint64_t message;
    size_t   size;

    ctx->begin = T_tick();
    ctx->status = rtems_message_queue_receive(
      ctx->queue_id,
      &message,
      &size,
      RTEMS_WAIT,
      UINT32_MAX
    );
  description: null
test-cleanup: null
test-prepare: null
test-setup:
  brief: |
    Schedule a message send.
  code: |
    SetPriority( ctx->worker_id, PRIO_LOW );
    Send( ctx, EVENT_END | EVENT_SEND );
  description: null
test-teardown:
  brief: |
    Set the measured runtime.  Restore the worker priority.  Discard samples
    interrupted by a clock tick.
  code: |
    T_quiet_rsc_success( ctx->status );

    *delta = ctx->end - ctx->begin;
    SetPriority( ctx->worker_id, PRIO_HIGH );

    return tic == toc;
  description: null
text: |
  Let U and V be two tasks with the same home scheduler.  Let :math:`B`
  be a time point measured by U right before a call to
  ${../if/receive:/name} which blocks on the message queue with a timeout.  Let
  :math:`E` be a time point measured by V right after the first context
  switch after :math:`B`.

  While the execution environment is ${.:/environment}, while a message queue
  is empty, while the measurement sample is :math:`E - B`, when exactly
  ${../val/perf:/params/sample-count} samples are collected, the
  ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
