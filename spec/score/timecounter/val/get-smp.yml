SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
links: []
test-actions:
- action-brief: |
    Install timecounter of different quality levels and frequencies.
  action-code: |
    Timecounter     *tc;
    rtems_id         worker_id;
    Per_CPU_Control *cpu_self;

    tc = &test_timecounter;
    _SMP_barrier_Control_initialize( &tc->barrier );
    _SMP_barrier_State_initialize( &tc->barrier_state[ 0 ] );
    _SMP_barrier_State_initialize( &tc->barrier_state[ 1 ] );

    worker_id = CreateTask( "WORK", PRIO_NORMAL );
    SetScheduler( worker_id, SCHEDULER_B_ID, PRIO_NORMAL );
    StartTask( worker_id, Worker, tc );

    tc->base.tc_get_timecount = GetTimecount;
    tc->base.tc_counter_mask = 0xffffffff;
    tc->base.tc_frequency = 0x10000000;
    tc->base.tc_quality = RTEMS_TIMECOUNTER_QUALITY_CLOCK_DRIVER;
    rtems_timecounter_install( &tc->base );

    /* A */
    _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 0 ], 2 );
  checks:
  - brief: |
      Install a timecounter with a high quality level and normal frequency.
      Check that it was installed.
    code: |
      /* B0 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 0 ], 2 );

      /* B1 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 0 ], 2 );

      cpu_self = _Thread_Dispatch_disable();
      tc->delay = false;
      rtems_timecounter_tick();
      tc->delay = true;
      rtems_timecounter_tick();
      _Thread_Dispatch_enable( cpu_self );

      /* B4 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 0 ], 2 );

      /* B5 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 0 ], 2 );

      tc->base.tc_get_timecount = GetTimecountDummy;
      DeleteTask( worker_id );
    links:
    - role: validation
      uid: ../req/install-quality
  links: []
test-brief: |
  Tests directives to get a time value.
test-context: []
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems.h
- rtems/timecounter.h
- rtems/score/threaddispatch.h
- rtems/score/smpbarrier.h
test-local-includes:
- tx-support.h
test-setup: null
test-stop: null
test-support: |
  typedef struct {
    struct timecounter  base;
    bool                delay;
    uint32_t            counter;
    SMP_barrier_Control barrier;
    SMP_barrier_State   barrier_state[ 2 ];
  } Timecounter;

  static Timecounter test_timecounter;

  static uint32_t GetTimecount( struct timecounter *base )
  {
    Timecounter *tc;

    tc = (Timecounter *) base;

    if ( rtems_scheduler_get_processor() == 0 ) {
      if ( !tc->delay ) {
        return 0;
      }

      /* B2 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 0 ], 2 );

      /* B3 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 0 ], 2 );

      return 0;
    }

    if ( tc->counter == 0 ) {
      /* Do nothing */
    } else if ( tc->counter == 1 ) {
      tc->counter = 2;

      /* B1 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 1 ], 2 );

      /* B2 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 1 ], 2 );
    } else if ( tc->counter == 2 ) {
      tc->counter = 3;

      /* B3 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 1 ], 2 );

      /* B4 */
      _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 1 ], 2 );
    }

    return 0;
  }

  static uint32_t GetTimecountDummy( struct timecounter *base )
  {
    (void) base;

    return 0;
  }

  static void Worker( rtems_task_argument arg )
  {
    Timecounter   *tc;
    struct bintime bt;

    tc = (Timecounter *) arg;

    /* A */
    _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 1 ], 2 );

    tc->counter = 1;

    /* B0 */
    _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 1 ], 2 );

    rtems_clock_get_realtime_bintime( &bt );

    /* B5 */
    _SMP_barrier_Wait( &tc->barrier, &tc->barrier_state[ 1 ], 2 );

    ReceiveAnyEvents();
  }
test-target: testsuites/validation/tc-timecounter-get-smp.c
test-teardown: null
type: test-case
