SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: RTEMS_SMP
links: []
test-actions:
- action-brief: |
    The test action is carried out by TriggerTestCase().
  action-code: |
    /* Nothing to do */
  checks:
  - brief: |
      Check that the expected fatal source is present.
    code: |
      T_step_eq_int( ${step}, ctx->source, RTEMS_FATAL_SOURCE_SMP );
    links:
    - role: validation
      uid: ../req/fatal-shutdown-response
  - brief: |
      Check that the expected fatal code is present.
    code: |
      T_step_eq_ulong( ${step}, ctx->code, SMP_FATAL_SHUTDOWN_RESPONSE );
    links:
    - role: validation
      uid: ../req/fatal-shutdown-response
  links: []
- action-brief: |
    Issue a job on a processor in the shutdown state.  Check that the right
    fatal error occurs if we try to wait for this job to complete.
  action-code: |
    Per_CPU_Control *cpu;

    SetFatalExtension( FatalRecordAndJump );
    cpu = _Per_CPU_Get_by_index( 0 );
    _Per_CPU_Submit_job( cpu, &job );

    if ( setjmp( fatal_before ) == 0 ) {
      _Per_CPU_Wait_for_job( cpu, &job );
    }

    T_step_eq_uint(
      ${step},
      _Atomic_Load_uint( &fatal_counter, ATOMIC_ORDER_RELAXED ),
      1
    );
    T_step_eq_int( ${step}, fatal_source, RTEMS_FATAL_SOURCE_SMP );
    T_step_false( ${step}, fatal_always_set_to_false );
    T_step_eq_ulong(
      ${step},
      fatal_code,
      SMP_FATAL_WRONG_CPU_STATE_TO_PERFORM_JOBS
    );
    SetFatalExtension( NULL );
  checks: []
  links:
  - role: validation
    uid: ../req/fatal-wrong-cpu-state-to-perform-jobs
- action-brief: |
    Start multitasking on an invalid processor.  Check that the right fatal
    error occurs.
  action-code: |
    Per_CPU_Control *cpu;

    SetFatalExtension( FatalRecordAndJump );

    /*
     * This element is outside the array.  This is not an issue since
     * _SMP_Start_multitasking_on_secondary_processor() does not access the
     * structure.
     */
    cpu = _Per_CPU_Get_by_index( 3 );

    if ( setjmp( fatal_before ) == 0 ) {
      _SMP_Start_multitasking_on_secondary_processor( cpu );
    }

    T_step_eq_uint(
      ${step},
      _Atomic_Load_uint( &fatal_counter, ATOMIC_ORDER_RELAXED ),
      2
    );
    T_step_eq_int( ${step}, fatal_source, RTEMS_FATAL_SOURCE_SMP );
    T_step_false( ${step}, fatal_always_set_to_false );
    T_step_eq_ulong(
      ${step},
      fatal_code,
      SMP_FATAL_MULTITASKING_START_ON_INVALID_PROCESSOR
    );
    SetFatalExtension( NULL );
  checks: []
  links:
  - role: validation
    uid: ../req/fatal-multitasking-start-on-invalid-processor
- action-brief: |
    Start multitasking on an unassigned processor.  Check that the right fatal
    error occurs.
  action-code: |
    Per_CPU_Control *cpu;

    SetFatalExtension( FatalRecordAndJump );
    cpu = _Per_CPU_Get_by_index( 2 );

    if ( setjmp( fatal_before ) == 0 ) {
      _SMP_Start_multitasking_on_secondary_processor( cpu );
    }

    T_step_eq_uint(
      ${step},
      _Atomic_Load_uint( &fatal_counter, ATOMIC_ORDER_RELAXED ),
      3
    );
    T_step_eq_int( ${step}, fatal_source, RTEMS_FATAL_SOURCE_SMP );
    T_step_false( ${step}, fatal_always_set_to_false );
    T_step_eq_ulong(
      ${step},
      fatal_code,
      SMP_FATAL_MULTITASKING_START_ON_UNASSIGNED_PROCESSOR
    );
    SetFatalExtension( NULL );
  checks: []
  links:
  - role: validation
    uid: ../req/fatal-multitasking-start-on-unassigned-processor
test-brief: |
  Tests four fatal errors.
test-context: []
test-context-support: null
test-description: null
test-header:
  code: null
  freestanding: true
  includes:
  - rtems.h
  local-includes: []
  run-params:
  - description: |
      is fatal source.
    dir: null
    name: source
    specifier: ${/rtems/userext/if/fatal-source:/name} ${.:name}
  - description: |
      is fatal code.
    dir: null
    name: code
    specifier: ${/rtems/userext/if/fatal-code:/name} ${.:name}
  target: testsuites/validation/tr-fatal-smp.h
test-includes:
- rtems/sysinit.h
- rtems/score/atomic.h
- rtems/score/smpimpl.h
- setjmp.h
test-local-includes:
- tr-fatal-smp.h
- tx-support.h
test-setup: null
test-stop: null
test-support: |
  static void TriggerTestCase( void )
  {
    _SMP_Request_shutdown();
    (void) _CPU_Thread_Idle_body( 0 );
  }

  RTEMS_SYSINIT_ITEM(
    TriggerTestCase,
    RTEMS_SYSINIT_DEVICE_DRIVERS,
    RTEMS_SYSINIT_ORDER_MIDDLE
  );

  static jmp_buf fatal_before;

  static Atomic_Uint fatal_counter;

  static rtems_fatal_source fatal_source;

  static bool fatal_always_set_to_false;

  static rtems_fatal_code fatal_code;

  static void FatalRecordAndJump(
    rtems_fatal_source source,
    bool               always_set_to_false,
    rtems_fatal_code   code
  )
  {
    fatal_source = source;
    fatal_always_set_to_false = always_set_to_false;
    fatal_code = code;
    _Atomic_Fetch_add_uint( &fatal_counter, 1, ATOMIC_ORDER_RELAXED );
    longjmp( fatal_before, 1 );
  }

  static void DoNothing( void *arg )
  {
    (void) arg;
  }

  static const Per_CPU_Job_context job_context = {
    .handler = DoNothing
  };

  Per_CPU_Job job = {
    .context = &job_context
  };
test-target: testsuites/validation/tr-fatal-smp.c
test-teardown: null
type: test-case
