SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: RTEMS_SMP
limits:
  sparc/gr712rc/smp/qual-only/3Y1G8SMm2FRTpZB5_0NhbpDnatbEYmbDLLW58d-wXuY=:
    DirtyCache:
      max-upper-bound: 1.128e-06
      median-lower-bound: 7.36e-07
      median-upper-bound: 1.104e-06
      min-lower-bound: 7.2e-07
    FullCache:
      max-upper-bound: 1.104e-06
      median-lower-bound: 7.2e-07
      median-upper-bound: 1.0799999999999998e-06
      min-lower-bound: 7.040000000000001e-07
    HotCache:
      max-upper-bound: 1.0799999999999998e-06
      median-lower-bound: 7.040000000000001e-07
      median-upper-bound: 1.056e-06
      min-lower-bound: 7.040000000000001e-07
    Load/1:
      max-upper-bound: 1.2239999999999998e-06
      median-lower-bound: 8.16e-07
      median-upper-bound: 1.2239999999999998e-06
      min-lower-bound: 8.0e-07
    Load/2:
      max-upper-bound: 1.2239999999999998e-06
      median-lower-bound: 8.0e-07
      median-upper-bound: 1.2e-06
      min-lower-bound: 7.84e-07
  sparc/gr712rc/smp/qual-only/LDe0OENspSb4U2hhl9QK2R3q4ntkBdYP_JLnD_-aZ34=:
    DirtyCache:
      max-upper-bound: 1.8299999999999998e-06
      median-lower-bound: 1.2096000000000002e-06
      median-upper-bound: 1.8144e-06
      min-lower-bound: 1.2096000000000002e-06
    FullCache:
      max-upper-bound: 1.32e-06
      median-lower-bound: 4.0960000000000007e-07
      median-upper-bound: 6.144e-07
      min-lower-bound: 4.0e-07
    HotCache:
      max-upper-bound: 6.0e-07
      median-lower-bound: 4.0e-07
      median-upper-bound: 6.0e-07
      min-lower-bound: 3.896e-07
    Load/1:
      max-upper-bound: 1.8e-06
      median-lower-bound: 1.1800000000000001e-06
      median-upper-bound: 1.77e-06
      min-lower-bound: 1.1800000000000001e-06
    Load/2:
      max-upper-bound: 2.04e-06
      median-lower-bound: 1.3496e-06
      median-upper-bound: 2.0243999999999996e-06
      min-lower-bound: 1.34e-06
  sparc/gr740/smp/qual-only/3Y1G8SMm2FRTpZB5_0NhbpDnatbEYmbDLLW58d-wXuY=:
    DirtyCache:
      max-upper-bound: 5.2391999999999996e-05
      median-lower-bound: 3.4432000000000005e-05
      median-upper-bound: 5.1648e-05
      min-lower-bound: 3.3984e-05
    FullCache:
      max-upper-bound: 5.0808e-05
      median-lower-bound: 3.3728000000000006e-05
      median-upper-bound: 5.0592e-05
      min-lower-bound: 3.3552e-05
    HotCache:
      max-upper-bound: 5.1384e-05
      median-lower-bound: 3.36e-05
      median-upper-bound: 5.04e-05
      min-lower-bound: 3.344e-05
    Load/1:
      max-upper-bound: 5.7648e-05
      median-lower-bound: 3.7680000000000005e-05
      median-upper-bound: 5.6519999999999994e-05
      min-lower-bound: 3.7104e-05
    Load/2:
      max-upper-bound: 5.7408e-05
      median-lower-bound: 3.752000000000001e-05
      median-upper-bound: 5.6279999999999996e-05
      min-lower-bound: 3.7168e-05
    Load/3:
      max-upper-bound: 5.7408e-05
      median-lower-bound: 3.7488000000000004e-05
      median-upper-bound: 5.6232e-05
      min-lower-bound: 3.7168e-05
    Load/4:
      max-upper-bound: 5.726399999999999e-05
      median-lower-bound: 3.752000000000001e-05
      median-upper-bound: 5.6279999999999996e-05
      min-lower-bound: 3.7104e-05
  sparc/gr740/smp/qual-only/qpmWME3Tk2kfoQL1kmgyerzkvLKkrfPY7xWIWGfY0Fg=:
    DirtyCache:
      max-upper-bound: 5.8439999999999996e-05
      median-lower-bound: 3.3510400000000004e-05
      median-upper-bound: 5.02656e-05
      min-lower-bound: 3.24704e-05
    FullCache:
      max-upper-bound: 3.552e-05
      median-lower-bound: 1.3769600000000001e-05
      median-upper-bound: 2.06544e-05
      min-lower-bound: 1.35776e-05
    HotCache:
      max-upper-bound: 1.13664e-05
      median-lower-bound: 7.385600000000001e-06
      median-upper-bound: 1.10784e-05
      min-lower-bound: 7.385600000000001e-06
    Load/1:
      max-upper-bound: 7.504799999999999e-05
      median-lower-bound: 3.1715200000000004e-05
      median-upper-bound: 4.75728e-05
      min-lower-bound: 3.13216e-05
    Load/2:
      max-upper-bound: 0.0002649024
      median-lower-bound: 0.0001764512
      median-upper-bound: 0.0002646768
      min-lower-bound: 0.0001732448
    Load/3:
      max-upper-bound: 0.00045756
      median-lower-bound: 0.0002989088
      median-upper-bound: 0.0004483632
      min-lower-bound: 0.0002978912
    Load/4:
      max-upper-bound: 0.0005768112
      median-lower-bound: 0.0003817792
      median-upper-bound: 0.0005726688
      min-lower-bound: 0.0003806912
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Automatically release the barrier.
  code: |
    ctx->begin = T_tick();
    ctx->status = rtems_barrier_wait( ctx->barrier_id, RTEMS_NO_TIMEOUT );
  description: null
test-cleanup:
  brief: |
    Delete the barrier and the worker.
  code: |
    rtems_status_code sc;

    DeleteTask( ctx->worker_id );

    sc = rtems_barrier_delete( ctx->barrier_id );
    T_rsc_success( sc );
  description: null
test-prepare:
  brief: |
    Create an automatic release barrier.  Create and start a worker task.
  code: |
    rtems_status_code sc;

    sc = rtems_barrier_create(
      OBJECT_NAME,
      RTEMS_BARRIER_AUTOMATIC_RELEASE,
      2,
      &ctx->barrier_id
    );
    T_rsc_success( sc );

    ctx->worker_id = CreateTask( "WORK", PRIO_NORMAL );
    SetScheduler( ctx->worker_id, SCHEDULER_B_ID, PRIO_NORMAL );
    StartTask( ctx->worker_id, BarrierWaitWorker, ctx );
    WaitForNextTask( 1, ctx->worker_id );
  description: null
test-setup: null
test-teardown:
  brief: |
    Make sure the worker waits for the next event.  Set the measured runtime.
    Discard samples interrupted by a clock tick.
  code: |
    T_quiet_rsc_success( ctx->status );

    WaitForNextTask( 1, ctx->worker_id );
    *delta = ctx->end - ctx->begin;

    return tic == toc;
  description: null
text: |
  Let U and V be two tasks with distinct home schedulers.  Let :math:`B`
  be a time point measured by U right before a call to ${../if/wait:/name}
  which automaticall releases the barrier.  Let :math:`E` be a time point
  measured by V right after a call to ${../if/wait:/name} returns
  successfully due to the ${../if/wait:/name} call associated with :math:`B`.
  While the execution environment is ${.:/environment}, while the barrier is an
  automatic release barrier, while the measurement sample is :math:`E - B`,
  when exactly ${../val/perf:/params/sample-count} samples are collected, the
  ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
