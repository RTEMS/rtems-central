SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH & Co. KG
enabled-by: true
links: []
test-actions:
- action-brief: |
    Install a timecounter which can be used to perform interrut tests for the
    get time directives.
  action-code: |
    T_interrupt_test_config config = {
      .prepare = InterruptPrepare,
      .interrupt = Interrupt,
      .max_iteration_count = 10000
    };
    Timecounter *tc;

    tc = &test_timecounter;
    tc->base.tc_get_timecount = GetTimecount;
    tc->base.tc_counter_mask = 0xffffffff;
    tc->base.tc_frequency = rtems_counter_frequency();
    tc->base.tc_quality = RTEMS_TIMECOUNTER_QUALITY_CLOCK_DRIVER + 1;
    tc->busy = T_get_one_clock_tick_busy() / 10;
    rtems_clock_get_realtime_bintime( &tc->tod );
    rtems_timecounter_install( &tc->base );
  checks:
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-realtime:/name} directive to
      provoke a change in the timehand generation number.
    code: |
      config.action = ActionRealtime;
      T_true( InterruptTest( &config, tc, 1 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-realtime
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-realtime-bintime:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionRealtimeBintime;
      T_true( InterruptTest( &config, tc, 1 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-realtime
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-realtime-timeval:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionRealtimeTimeval;
      T_true( InterruptTest( &config, tc, 1 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-realtime
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-monotonic:/name} directive to
      provoke a change in the timehand generation number.
    code: |
      config.action = ActionMonotonic;
      T_true( InterruptTest( &config, tc, 1 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-monotonic
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-monotonic-bintime:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionMonotonicBintime;
      T_true( InterruptTest( &config, tc, 1 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-monotonic
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-monotonic-sbintime:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionMonotonicSbintime;
      T_true( InterruptTest( &config, tc, 1 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-monotonic
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-monotonic-timeval:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionMonotonicTimeval;
      T_true( InterruptTest( &config, tc, 1 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-monotonic
  - brief: |
      Prepare for the coarse get time directives.
    code: |
      config.interrupt = InterruptCoarse;
    links: []
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-realtime-coarse:/name} directive to
      provoke a change in the timehand generation number.
    code: |
      config.action = ActionCoarseRealtime;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-realtime-coarse
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-realtime-coarse-bintime:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionCoarseRealtimeBintime;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-realtime-coarse
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-realtime-coarse-timeval:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionCoarseRealtimeTimeval;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-realtime-coarse
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-monotonic-coarse:/name} directive to
      provoke a change in the timehand generation number.
    code: |
      config.action = ActionCoarseMonotonic;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-monotonic-coarse
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-monotonic-coarse-bintime:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionCoarseMonotonicBintime;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-monotonic-coarse
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-monotonic-coarse-timeval:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionCoarseMonotonicTimeval;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-monotonic-coarse
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-boot-time:/name} directive to
      provoke a change in the timehand generation number.
    code: |
      config.action = ActionBootTime;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-boot-time
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-boot-time-bintime:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionBootTimeBintime;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-boot-time
  - brief: |
      Try to interrupt the ${/rtems/clock/if/get-boot-time-timeval:/name}
      directive to provoke a change in the timehand generation number.
    code: |
      config.action = ActionBootTimeTimeval;
      T_true( InterruptTest( &config, tc, 10 ) );
    links:
    - role: validation
      uid: ../req/get-non-blocking
    - role: validation
      uid: /rtems/clock/req/get-boot-time
  links: []
test-brief: |
  Tests directives to get a time value.
test-context: []
test-context-support: |
test-description: null
test-header: null
test-includes:
- rtems.h
- rtems/counter.h
- rtems/timecounter.h
- rtems/score/timecounterimpl.h
test-local-includes:
- tx-support.h
test-setup: null
test-stop: null
test-support: |
  typedef enum {
    STATE_EARLY,
    STATE_GET_TIMECOUNT_BEFORE,
    STATE_GET_TIMECOUNT_BUSY,
    STATE_GET_TIMECOUNT_DONE,
    STATE_GET_TIMECOUNT_AFTER
  } State;

  typedef struct {
    struct timecounter  base;
    State               state;
    uint_fast32_t       busy;
    struct bintime      tod;
  } Timecounter;

  static Timecounter test_timecounter;

  static uint32_t GetTimecount( struct timecounter *base )
  {
    Timecounter *tc;

    tc = (Timecounter *) base;

    if (
      tc->state == STATE_GET_TIMECOUNT_BEFORE &&
      !rtems_interrupt_is_in_progress()
    ) {
      tc->state = STATE_GET_TIMECOUNT_BUSY;
      T_busy( tc->busy );
      tc->state = STATE_GET_TIMECOUNT_DONE;
    }

    return rtems_counter_read();
  }

  static void InterruptPrepare( void *arg )
  {
    Timecounter *tc;

    tc = (Timecounter *) arg;
    tc->state = STATE_EARLY;
  }

  static void ActionRealtime( void *arg )
  {
    Timecounter    *tc;
    struct timespec ts;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_realtime( &ts );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionRealtimeBintime( void *arg )
  {
    Timecounter   *tc;
    struct bintime bt;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_realtime_bintime( &bt );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionRealtimeTimeval( void *arg )
  {
    Timecounter   *tc;
    struct timeval tv;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_realtime_timeval( &tv );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionMonotonic( void *arg )
  {
    Timecounter    *tc;
    struct timespec ts;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_monotonic( &ts );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionMonotonicBintime( void *arg )
  {
    Timecounter   *tc;
    struct bintime bt;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_monotonic_bintime( &bt );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionMonotonicSbintime( void *arg )
  {
    Timecounter *tc;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    (void) rtems_clock_get_monotonic_sbintime();
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionMonotonicTimeval( void *arg )
  {
    Timecounter   *tc;
    struct timeval tv;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_monotonic_timeval( &tv );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionCoarseRealtime( void *arg )
  {
    Timecounter    *tc;
    struct timespec ts;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_realtime_coarse( &ts );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionCoarseRealtimeBintime( void *arg )
  {
    Timecounter   *tc;
    struct bintime bt;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_realtime_coarse_bintime( &bt );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionCoarseRealtimeTimeval( void *arg )
  {
    Timecounter   *tc;
    struct timeval tv;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_realtime_coarse_timeval( &tv );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionCoarseMonotonic( void *arg )
  {
    Timecounter    *tc;
    struct timespec ts;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_monotonic_coarse( &ts );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionCoarseMonotonicBintime( void *arg )
  {
    Timecounter   *tc;
    struct bintime bt;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_monotonic_coarse_bintime( &bt );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionCoarseMonotonicTimeval( void *arg )
  {
    Timecounter   *tc;
    struct timeval tv;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_monotonic_coarse_timeval( &tv );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionBootTime( void *arg )
  {
    Timecounter    *tc;
    struct timespec ts;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_boot_time( &ts );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionBootTimeBintime( void *arg )
  {
    Timecounter   *tc;
    struct bintime bt;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_boot_time_bintime( &bt );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void ActionBootTimeTimeval( void *arg )
  {
    Timecounter   *tc;
    struct timeval tv;

    tc = (Timecounter *) arg;
    tc->state = STATE_GET_TIMECOUNT_BEFORE;
    rtems_clock_get_boot_time_timeval( &tv );
    tc->state = STATE_GET_TIMECOUNT_AFTER;
  }

  static void CallTimcounterWindupTwice( const Timecounter *tc )
  {
    ISR_lock_Context lock_context;

    /*
     * Make sure that tc_windup() was called at least twice to increment the
     * generation number for * both timehands.
     */

    _Timecounter_Acquire( &lock_context );
    _Timecounter_Set_clock( &tc->tod, &lock_context );

    _Timecounter_Acquire( &lock_context );
    _Timecounter_Set_clock( &tc->tod, &lock_context );
  }

  static T_interrupt_test_state Interrupt( void *arg )
  {
    Timecounter *tc;
    State        state;

    tc = (Timecounter *) arg;
    state = tc->state;

    if ( state == STATE_EARLY || state == STATE_GET_TIMECOUNT_BEFORE ) {
      return T_INTERRUPT_TEST_EARLY;
    }

    if ( state == STATE_GET_TIMECOUNT_BUSY ) {
      CallTimcounterWindupTwice( tc );

      return T_INTERRUPT_TEST_DONE;
    }

    return T_INTERRUPT_TEST_LATE;
  }

  static T_interrupt_test_state InterruptCoarse( void *arg )
  {
    Timecounter *tc;
    State        state;

    tc = (Timecounter *) arg;
    state = tc->state;

    if ( state == STATE_EARLY ) {
      return T_INTERRUPT_TEST_EARLY;
    }

    if ( state == STATE_GET_TIMECOUNT_BEFORE ) {
      CallTimcounterWindupTwice( tc );

      return T_INTERRUPT_TEST_DONE;
    }

    return T_INTERRUPT_TEST_LATE;
  }

  static bool InterruptTest(
    const T_interrupt_test_config *config,
    void                          *arg,
    uint32_t                       iterations
  )
  {
    uint32_t i;
    bool     ok;

    ok = false;

    for ( i = 0; i < iterations; ++i ) {
      T_interrupt_test_state test_state;

      test_state = T_interrupt_test( config, arg );
      ok = ok || test_state == T_INTERRUPT_TEST_DONE;
    }

    return ok;
  }
test-target: testsuites/validation/tc-timecounter-get.c
test-teardown: null
type: test-case
