SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
links:
- role: validation
  uid: ../req/perf-runtime
params:
  sample-count: 1000
test-brief: |
  This test case provides a context to run ${../if/group:/name} performance
  tests.
test-cleanup: null
test-context:
- brief: |
    This member provides a message queue identifier.
  description: null
  member: |
    rtems_id queue_id
- brief: |
    This member provides a worker identifier.
  description: null
  member: |
    rtems_id worker_id
- brief: |
    This member provides a status code.
  description: null
  member: |
    rtems_status_code status
test-context-support: null
test-description: null
test-includes:
- rtems.h
test-local-includes:
- tx-support.h
test-prepare: null
test-setup:
  brief: |
    Create a message queue and a worker task.
  code: |
    rtems_status_code sc;

    SetSelfPriority( PRIO_NORMAL );

    sc = rtems_message_queue_construct( &config, &ctx->queue_id );
    T_rsc_success( sc );

    ctx->worker_id = CreateTask( "WORK", PRIO_HIGH );
    StartTask( ctx->worker_id, Worker, ctx );
  description: null
test-stop: null
test-support: |
  #define MAXIMUM_PENDING_MESSAGES 1

  #define MAXIMUM_MESSAGE_SIZE 8

  typedef ${.:/test-context-type} Context;

  typedef enum {
    EVENT_END = RTEMS_EVENT_0,
    EVENT_SEND = RTEMS_EVENT_1,
    EVENT_SEND_END = RTEMS_EVENT_2,
    EVENT_RECEIVE = RTEMS_EVENT_3,
    EVENT_RECEIVE_END = RTEMS_EVENT_4
  } Event;

  static RTEMS_MESSAGE_QUEUE_BUFFER( MAXIMUM_MESSAGE_SIZE )
    storage_area[ MAXIMUM_PENDING_MESSAGES ];

  rtems_message_queue_config config = {
    .name = OBJECT_NAME,
    .maximum_pending_messages = MAXIMUM_PENDING_MESSAGES,
    .maximum_message_size = MAXIMUM_MESSAGE_SIZE,
    .storage_area = storage_area,
    .storage_size = sizeof( storage_area )
  };

  static void Send( const Context *ctx, rtems_event_set events )
  {
    SendEvents( ctx->worker_id, events );
  }

  static void Worker( rtems_task_argument arg )
  {
    Context *ctx;

    ctx = (Context *) arg;

    while ( true ) {
      rtems_event_set   events;
      rtems_status_code sc;
      T_ticks           ticks;
      uint64_t          message;

      sc = rtems_event_receive(
        RTEMS_ALL_EVENTS,
        RTEMS_EVENT_ANY | RTEMS_WAIT,
        RTEMS_NO_TIMEOUT,
        &events
      );
      ticks = T_tick();
      T_quiet_rsc_success( sc );

      if ( ( events & EVENT_END ) != 0 ) {
        ctx->end = ticks;
      }

      if ( ( events & EVENT_SEND ) != 0 ) {
        message = 0;
        sc = rtems_message_queue_send(
          ctx->queue_id,
          &message,
          sizeof( message )
        );
        ticks = T_tick();
        T_quiet_rsc_success( sc );

        if ( ( events & EVENT_SEND_END ) != 0 ) {
          ctx->end = ticks;
        }
      }

      if ( ( events & EVENT_RECEIVE ) != 0 ) {
        size_t size;

        sc = rtems_message_queue_receive(
          ctx->queue_id,
          &message,
          &size,
          RTEMS_WAIT,
          RTEMS_NO_TIMEOUT
        );
        ticks = T_tick();
        T_quiet_rsc_success( sc );

        if ( ( events & EVENT_RECEIVE_END ) != 0 ) {
          ctx->end = ticks;
        }
      }
    }
  }
test-target: testsuites/validation/tc-message-performance.c
test-teardown:
  brief: |
    Delete the worker task and the message queue.
  code: |
    rtems_status_code sc;

    DeleteTask( ctx->worker_id );

    sc = rtems_message_queue_delete( ctx->queue_id );
    T_rsc_success( sc );

    RestoreRunnerPriority();
  description: null
type: runtime-measurement-test
