SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
limits:
  sparc/gr712rc/smp/qual-only/3Y1G8SMm2FRTpZB5_0NhbpDnatbEYmbDLLW58d-wXuY=:
    DirtyCache:
      max-upper-bound: 1.008e-06
      median-lower-bound: 6.720000000000001e-07
      median-upper-bound: 1.008e-06
      min-lower-bound: 6.720000000000001e-07
    FullCache:
      max-upper-bound: 1.008e-06
      median-lower-bound: 6.56e-07
      median-upper-bound: 9.84e-07
      min-lower-bound: 6.56e-07
    HotCache:
      max-upper-bound: 1.008e-06
      median-lower-bound: 6.56e-07
      median-upper-bound: 9.84e-07
      min-lower-bound: 6.56e-07
    Load/1:
      max-upper-bound: 1.128e-06
      median-lower-bound: 7.520000000000001e-07
      median-upper-bound: 1.128e-06
      min-lower-bound: 7.520000000000001e-07
    Load/2:
      max-upper-bound: 1.128e-06
      median-lower-bound: 7.520000000000001e-07
      median-upper-bound: 1.128e-06
      min-lower-bound: 7.520000000000001e-07
  sparc/gr712rc/smp/qual-only/LDe0OENspSb4U2hhl9QK2R3q4ntkBdYP_JLnD_-aZ34=:
    DirtyCache:
      max-upper-bound: 1.6044e-06
      median-lower-bound: 1.0496e-06
      median-upper-bound: 1.5744000000000001e-06
      min-lower-bound: 1.0496e-06
    FullCache:
      max-upper-bound: 1.3044e-06
      median-lower-bound: 3.6e-07
      median-upper-bound: 5.399999999999999e-07
      min-lower-bound: 3.496e-07
    HotCache:
      max-upper-bound: 4.8e-07
      median-lower-bound: 3.2e-07
      median-upper-bound: 4.8e-07
      min-lower-bound: 3.096e-07
    Load/1:
      max-upper-bound: 1.59e-06
      median-lower-bound: 1.0296e-06
      median-upper-bound: 1.5443999999999998e-06
      min-lower-bound: 1.0200000000000002e-06
    Load/2:
      max-upper-bound: 1.89e-06
      median-lower-bound: 1.2000000000000002e-06
      median-upper-bound: 1.8e-06
      min-lower-bound: 1.1896e-06
  sparc/gr712rc/uni/qual-only/3Y1G8SMm2FRTpZB5_0NhbpDnatbEYmbDLLW58d-wXuY=:
    DirtyCache:
      max-upper-bound: 2.4e-06
      median-lower-bound: 0.0
      median-upper-bound: 0.0
      min-lower-bound: 0.0
    FullCache:
      max-upper-bound: 2.4e-06
      median-lower-bound: 0.0
      median-upper-bound: 0.0
      min-lower-bound: 0.0
    HotCache:
      max-upper-bound: 2.4e-06
      median-lower-bound: 0.0
      median-upper-bound: 0.0
      min-lower-bound: 0.0
    Load/1:
      max-upper-bound: 2.4e-06
      median-lower-bound: 0.0
      median-upper-bound: 0.0
      min-lower-bound: 0.0
  sparc/gr740/smp/qual-only/3Y1G8SMm2FRTpZB5_0NhbpDnatbEYmbDLLW58d-wXuY=:
    DirtyCache:
      max-upper-bound: 4.86e-05
      median-lower-bound: 3.2176e-05
      median-upper-bound: 4.8264e-05
      min-lower-bound: 3.2016e-05
    FullCache:
      max-upper-bound: 4.7159999999999996e-05
      median-lower-bound: 3.1376e-05
      median-upper-bound: 4.7064e-05
      min-lower-bound: 3.1376e-05
    HotCache:
      max-upper-bound: 4.6896e-05
      median-lower-bound: 3.1264e-05
      median-upper-bound: 4.6896e-05
      min-lower-bound: 3.1264e-05
    Load/1:
      max-upper-bound: 5.3376e-05
      median-lower-bound: 3.5584000000000004e-05
      median-upper-bound: 5.3376e-05
      min-lower-bound: 3.5136000000000004e-05
    Load/2:
      max-upper-bound: 5.3376e-05
      median-lower-bound: 3.5584000000000004e-05
      median-upper-bound: 5.3376e-05
      min-lower-bound: 3.5136000000000004e-05
    Load/3:
      max-upper-bound: 5.3376e-05
      median-lower-bound: 3.5584000000000004e-05
      median-upper-bound: 5.3376e-05
      min-lower-bound: 3.5136000000000004e-05
    Load/4:
      max-upper-bound: 5.3376e-05
      median-lower-bound: 3.5584000000000004e-05
      median-upper-bound: 5.3376e-05
      min-lower-bound: 3.5136000000000004e-05
  sparc/gr740/uni/qual-only/3Y1G8SMm2FRTpZB5_0NhbpDnatbEYmbDLLW58d-wXuY=:
    DirtyCache:
      max-upper-bound: 3.1944e-05
      median-lower-bound: 2.1104000000000003e-05
      median-upper-bound: 3.1656e-05
      min-lower-bound: 2.0976e-05
    FullCache:
      max-upper-bound: 3.0335999999999996e-05
      median-lower-bound: 2.016e-05
      median-upper-bound: 3.024e-05
      min-lower-bound: 2.016e-05
    HotCache:
      max-upper-bound: 3.0072e-05
      median-lower-bound: 2.0048000000000002e-05
      median-upper-bound: 3.0072e-05
      min-lower-bound: 2.0048000000000002e-05
    Load/1:
      max-upper-bound: 3.6312e-05
      median-lower-bound: 2.4144e-05
      median-upper-bound: 3.6216e-05
      min-lower-bound: 2.4144e-05
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Release the barrier.
  code: |
    uint32_t count;

    ctx->begin = T_tick();
    ctx->status = rtems_barrier_release( ctx->barrier_id, &count );
  description: null
test-cleanup:
  brief: |
    Delete the barrier and the worker.
  code: |
    rtems_status_code sc;

    DeleteTask( ctx->worker_id );

    sc = rtems_barrier_delete( ctx->barrier_id );
    T_rsc_success( sc );

    RestoreRunnerPriority();
  description: null
test-prepare:
  brief: |
    Create a manual release barrier.  Create and start a worker task.
  code: |
    rtems_status_code sc;

    sc = rtems_barrier_create(
      OBJECT_NAME,
      RTEMS_BARRIER_MANUAL_RELEASE,
      0,
      &ctx->barrier_id
    );
    T_rsc_success( sc );

    SetSelfPriority( PRIO_NORMAL );
    ctx->worker_id = CreateTask( "WORK", PRIO_HIGH );
    StartTask( ctx->worker_id, BarrierWaitWorker, ctx );
  description: null
test-setup: null
test-teardown:
  brief: |
    Set the measured runtime.  Discard samples interrupted by a clock tick.
  code: |
    T_quiet_rsc_success( ctx->status );

    *delta = ctx->end - ctx->begin;

    return tic == toc;
  description: null
text: |
  Let ``U` and `V`` be two tasks with the same home scheduler.  Let :math:`B`
  be a time point measured by ``U`` right before a call to
  ${../if/release:/name} which preempts the caller.  Let :math:`E` be a time
  point measured by ``V`` right after a call to ${../if/wait:/name} returns
  successfully due to the ${../if/release:/name} call associated with
  :math:`B`.

  While the execution environment is ${.:/environment}, while the barrier is a
  manual release barrier, while the measurement sample is :math:`E - B`, when
  exactly ${../val/perf:/params/sample-count} samples are collected, the
  ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
