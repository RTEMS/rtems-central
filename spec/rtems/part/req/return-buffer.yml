SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2020 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
functional-type: action
links:
- role: interface-function
  uid: ../if/return-buffer
post-conditions:
- name: Status
  states:
  - name: Ok
    test-code: |
      T_rsc_success( ctx->status );
    text: |
      The return status of ${../if/return-buffer:/name} shall be
      ${../../status/if/successful:/name}.
  - name: InvId
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_ID );
    text: |
      The return status of ${../if/return-buffer:/name} shall be
      ${../../status/if/invalid-id:/name}.
  - name: InvAddr
    test-code: |
      T_rsc( ctx->status, RTEMS_INVALID_ADDRESS );
    text: |
      The return status of ${../if/return-buffer:/name} shall be
      ${../../status/if/invalid-address:/name}.
  test-epilogue: null
  test-prologue: null
- name: Buf
  states:
  - name: Free
    test-code: |
      sc = rtems_partition_get_buffer( ctx->id_value, &ctx->buffer_in_use );
      T_rsc_success( sc );
      T_eq_ptr( ctx->buffer_in_use, buffers );
    text: |
      The buffer obtained from the partition shall be made available for re-use
      by the ${../if/return-buffer:/name} call.
  - name: InUse
    test-code: |
      sc = rtems_partition_get_buffer( ctx->id_value, &no_buffer );
      T_rsc( sc, RTEMS_UNSATISFIED );
    text: |
      The buffer obtained from the partition shall be still in use after the
      ${../if/return-buffer:/name} call.
  test-epilogue: null
  test-prologue: |
    rtems_status_code sc;
    void             *no_buffer;
pre-conditions:
- name: Id
  states:
  - name: NoObj
    test-code: |
      ctx->id = 0xffffffff;
    text: |
      While the ${../if/return-buffer:/params[0]/name} parameter is invalid.
  - name: Part
    test-code: |
      ctx->id = ctx->id_value;
    text: |
      While the ${../if/return-buffer:/params[0]/name} parameter is associated
      with a partition.
  test-epilogue: null
  test-prologue: null
- name: Buf
  states:
  - name: Valid
    test-code: |
      ctx->buffer = ctx->buffer_in_use;
    text: |
      While the ${../if/return-buffer:/params[1]/name} parameter references a
      buffer previously returned by ${../if/get-buffer:/name}.
  - name: BadAlign
    test-code: |
      ctx->buffer = (void *) ( (uintptr_t) ctx->buffer_in_use + 1 );
    text: |
      While the ${../if/return-buffer:/params[1]/name} parameter is an address
      inside the buffer area of the partition,
      while the address is not on a valid buffer boundary.
  - name: BelowArea
    test-code: |
      ctx->buffer = (void *) ( (uintptr_t) buffers - 1 );
    text: |
      While the ${../if/return-buffer:/params[1]/name} parameter is an address
      below the buffer area of the partition.
  - name: AboveArea
    test-code: |
      ctx->buffer = (void *) ( (uintptr_t) buffers + sizeof( buffers ) );
    text: |
      While the ${../if/return-buffer:/params[1]/name} parameter is an address
      above the buffer area of the partition.
  test-epilogue: null
  test-prologue: null
rationale: null
references: []
requirement-type: functional
skip-reasons: {}
test-action: |
  ctx->status = rtems_partition_return_buffer( ctx->id, ctx->buffer );
test-brief: null
test-cleanup: null
test-context:
- brief: null
  description: null
  member: rtems_status_code status
- brief: null
  description: null
  member: rtems_id id
- brief: null
  description: null
  member: rtems_id id_value
- brief: null
  description: null
  member: void *buffer
- brief: null
  description: null
  member: void *buffer_in_use
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems.h
test-local-includes: []
test-prepare: null
test-setup:
  brief: null
  code: |
    rtems_status_code sc;

    ctx->buffer_in_use = NULL;
    ctx->id_value = 0;

    sc = rtems_partition_create(
      rtems_build_name( 'N', 'A', 'M', 'E' ),
      buffers,
      sizeof( buffers ),
      sizeof( buffers[ 0 ] ),
      RTEMS_DEFAULT_ATTRIBUTES,
      &ctx->id_value
    );
    T_assert_rsc_success( sc );

    sc = rtems_partition_get_buffer( ctx->id_value, &ctx->buffer_in_use );
    T_assert_rsc_success( sc );
    T_assert_eq_ptr( ctx->buffer_in_use, buffers );
  description: null
test-stop: null
test-support: |
  #define BUFFER_COUNT 1

  #define BUFFER_SIZE ( 2 * sizeof( void * ) )

  static RTEMS_ALIGNED( RTEMS_PARTITION_ALIGNMENT ) uint8_t
    buffers[ BUFFER_COUNT ][ BUFFER_SIZE ];
test-target: testsuites/validation/tc-part-return.c
test-teardown:
  brief: null
  code: |
    rtems_status_code sc;

    if ( ctx->buffer_in_use != NULL ) {
      sc = rtems_partition_return_buffer( ctx->id_value, ctx->buffer_in_use );
      T_rsc_success( sc );
    }

    if ( ctx->id_value != 0 ) {
      sc = rtems_partition_delete( ctx->id_value );
      T_rsc_success( sc );
    }
  description: null
text: ${.:text-template}
transition-map:
- enabled-by: true
  post-conditions:
    Status: Ok
    Buf: Free
  pre-conditions:
    Buf:
    - Valid
    Id:
    - Part
- enabled-by: true
  post-conditions:
    Status: InvId
    Buf: InUse
  pre-conditions:
    Buf: all
    Id:
    - NoObj
- enabled-by: true
  post-conditions:
    Status: InvAddr
    Buf: InUse
  pre-conditions:
    Buf:
    - BadAlign
    - BelowArea
    - AboveArea
    Id:
    - Part
type: requirement
