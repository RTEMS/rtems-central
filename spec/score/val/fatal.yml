SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: true
links: []
test-actions:
- action-brief: |
    Construct a task with a task body which returns.  Check that the right
    fatal error occurs.
  action-code: |
    rtems_id     id;
    unsigned int counter;

    SetFatalExtension( FatalTaskExit );
    SetSelfPriority( PRIO_NORMAL );
    counter = ResetFatalInfo();
    id = CreateTask( "EXIT", PRIO_HIGH );
    StartTask( id, ExitTask, NULL );
    T_eq_uint( GetFatalCounter(), counter + 1 );
    T_eq_int( fatal_info.source, INTERNAL_ERROR_CORE );
    T_false( fatal_info.always_set_to_false );
    T_eq_ulong( fatal_info.code, INTERNAL_ERROR_THREAD_EXITTED );
    RestoreRunnerPriority();
    SetFatalExtension( NULL );
  checks: []
  links:
  - role: validation
    uid: ../thread/req/fatal-thread-exitted
- action-brief: |
    Construct a task which performs a thread dispatch with maskable interrupts
    disabled.  Check that the right fatal error occurs or no fatal error
    occurs.
  action-code: |
    rtems_id     id;
    unsigned int counter;

    SetFatalExtension( FatalBadThreadDispatchEnvironment );
    SetSelfPriority( PRIO_NORMAL );
    counter = ResetFatalInfo();
    id = CreateTask( "BENV", PRIO_HIGH );
    StartTask( id, ISRDisabledThreadDispatchTask, NULL );

    #if CPU_ENABLE_ROBUST_THREAD_DISPATCH == FALSE
    if ( rtems_configuration_get_maximum_processors() > 1 ) {
    #endif
      T_eq_uint( GetFatalCounter(), counter + 1 );
      T_eq_int( fatal_info.source, INTERNAL_ERROR_CORE );
      T_false( fatal_info.always_set_to_false );
      T_eq_ulong(
        fatal_info.code,
        INTERNAL_ERROR_BAD_THREAD_DISPATCH_ENVIRONMENT
      );
    #if CPU_ENABLE_ROBUST_THREAD_DISPATCH == FALSE
    } else {
      T_eq_uint( GetFatalCounter(), counter );
    }
    #endif

    RestoreRunnerPriority();
    SetFatalExtension( NULL );
  checks: []
  links:
  - role: validation
    uid: ../thread/req/fatal-bad-thread-dispatch-environment-ipi
  - role: validation
    uid: ../thread/req/fatal-bad-thread-dispatch-environment-robust
  - role: validation
    uid: ../thread/req/thread-dispatch-isr-disabled
- action-brief: |
    Construct a task which performs a direct thread dispatch with a thread
    dispatch level not equal to one.  Check that the right fatal error occurs.
  action-code: |
    rtems_id     id;
    unsigned int counter;

    SetFatalExtension( FatalBadThreadDispatchDisableLevel );
    SetSelfPriority( PRIO_NORMAL );
    counter = ResetFatalInfo();
    id = CreateTask( "BLVL", PRIO_HIGH );
    StartTask( id, BadLevelThreadDispatchTask, NULL );
    T_eq_uint( GetFatalCounter(), counter + 1 );
    T_eq_int( fatal_info.source, INTERNAL_ERROR_CORE );
    T_false( fatal_info.always_set_to_false );
    T_eq_ulong(
      fatal_info.code,
      INTERNAL_ERROR_BAD_THREAD_DISPATCH_DISABLE_LEVEL
    );
    RestoreRunnerPriority();
    SetFatalExtension( NULL );
  checks: []
  links:
  - role: validation
    uid: ../thread/req/fatal-bad-thread-dispatch-disable-level
- action-brief: |
    Create a mutex and construct a task which produces a deadlock which
    involves the allocator mutex.
  action-code: |
    rtems_extensions_table extensions;
    rtems_status_code      sc;
    rtems_id               extension_id;
    rtems_id               task_id;
    unsigned int           counter;

    memset( &extensions, 0, sizeof( extensions ) );
    extensions.thread_create = ThreadCreateDeadlock;

    sc = rtems_extension_create(
      rtems_build_name( 'T', 'E', 'X', 'T' ),
      &extensions,
      &extension_id
    );
    T_rsc_success( sc );

    deadlock_mutex = CreateMutex();

    SetFatalExtension( FatalThreadQueueDeadlock );
    SetSelfPriority( PRIO_NORMAL );
    counter = ResetFatalInfo();

    ObtainMutex( deadlock_mutex );

    task_id = CreateTask( "WORK", PRIO_HIGH );
    StartTask( task_id, ThreadQueueDeadlockTask, NULL );

    if ( setjmp( before_deadlock ) == 0 ) {
      (void) CreateTask( "DLCK", PRIO_NORMAL );
    }

    ReleaseMutex( deadlock_mutex );

    T_eq_uint( GetFatalCounter(), counter + 1 );
    T_eq_int( fatal_info.source, INTERNAL_ERROR_CORE );
    T_false( fatal_info.always_set_to_false );
    T_eq_ulong(
      fatal_info.code,
      INTERNAL_ERROR_THREAD_QUEUE_DEADLOCK
    );

    RestoreRunnerPriority();
    SetFatalExtension( NULL );

    sc = rtems_extension_delete( extension_id );
    T_rsc_success( sc );

    DeleteMutex( deadlock_mutex );
  checks: []
  links:
  - role: validation
    uid: ../object/req/fatal-allocator-mutex-deadlock
test-brief: |
  Tests some fatal errors.
test-context: []
test-context-support: null
test-description: null
test-header: null
test-includes:
- rtems.h
- rtems/score/atomic.h
- rtems/score/isrlevel.h
- rtems/score/threaddispatch.h
- setjmp.h
- string.h
test-local-includes:
- tx-support.h
test-setup: null
test-stop: null
test-support: |
  typedef struct {
    Atomic_Uint        counter;
    rtems_fatal_source source;
    bool               always_set_to_false;
    rtems_fatal_code   code;
  } FatalInfo;

  static FatalInfo fatal_info;

  static unsigned int GetFatalCounter( void )
  {
    return _Atomic_Load_uint( &fatal_info.counter, ATOMIC_ORDER_RELAXED );
  }

  static unsigned int ResetFatalInfo( void )
  {
    fatal_info.source = RTEMS_FATAL_SOURCE_APPLICATION;
    fatal_info.always_set_to_false = true;
    fatal_info.code = INTERNAL_ERROR_NO_MPCI;

    return GetFatalCounter();
  }

  static void Fatal(
    rtems_fatal_source source,
    bool               always_set_to_false,
    rtems_fatal_code   code
  )
  {
    fatal_info.source = source;
    fatal_info.always_set_to_false = always_set_to_false;
    fatal_info.code = code;
    _Atomic_Fetch_add_uint( &fatal_info.counter, 1, ATOMIC_ORDER_RELAXED );
  }

  static void FatalTaskExit(
    rtems_fatal_source source,
    bool               always_set_to_false,
    rtems_fatal_code   code
  )
  {
    Fatal( source, always_set_to_false, code );
    rtems_task_exit();
  }

  static void ExitTask( rtems_task_argument arg )
  {
    (void) arg;
  }

  static void FatalBadThreadDispatchEnvironment(
    rtems_fatal_source source,
    bool               always_set_to_false,
    rtems_fatal_code   code
  )
  {
    Fatal( source, always_set_to_false, code );
    _ISR_Set_level( 0 );
    _Thread_Dispatch_direct_no_return( _Per_CPU_Get() );
  }

  static void ISRDisabledThreadDispatchTask( rtems_task_argument arg )
  {
    rtems_interrupt_level level;

    (void) arg;
    rtems_interrupt_local_disable( level );
    (void) level;
    rtems_task_exit();
  }

  static void FatalBadThreadDispatchDisableLevel(
    rtems_fatal_source source,
    bool               always_set_to_false,
    rtems_fatal_code   code
  )
  {
    Per_CPU_Control *cpu_self;

    Fatal( source, always_set_to_false, code );
    cpu_self = _Per_CPU_Get();
    _Thread_Dispatch_unnest( cpu_self );
    _Thread_Dispatch_direct_no_return( cpu_self );
  }

  static void BadLevelThreadDispatchTask( rtems_task_argument arg )
  {
    (void) arg;
    _Thread_Dispatch_disable();
    rtems_task_exit();
  }

  static jmp_buf before_deadlock;

  static rtems_id deadlock_mutex;

  static bool ThreadCreateDeadlock( rtems_tcb *executing, rtems_tcb *created )
  {
    (void) executing;
    (void) created;

    ObtainMutex( deadlock_mutex );
    ReleaseMutex( deadlock_mutex );

    return true;
  }

  static void FatalThreadQueueDeadlock(
    rtems_fatal_source source,
    bool               always_set_to_false,
    rtems_fatal_code   code
  )
  {
    Fatal( source, always_set_to_false, code );
    longjmp( before_deadlock, 1 );
  }

  static void ThreadQueueDeadlockTask( rtems_task_argument arg )
  {
    rtems_id id;

    (void) arg;
    id = CreateTask( "DORM", PRIO_NORMAL );
    DeleteTask( id );

    rtems_task_exit();
  }
test-target: testsuites/validation/tc-score-fatal.c
test-teardown: null
type: test-case
