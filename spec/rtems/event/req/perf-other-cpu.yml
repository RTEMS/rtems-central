SPDX-License-Identifier: CC-BY-SA-4.0 OR BSD-2-Clause
copyrights:
- Copyright (C) 2021 embedded brains GmbH (http://www.embedded-brains.de)
enabled-by: RTEMS_SMP
limits:
  sparc/gr712rc/smp/qual-only/3Y1G8SMm2FRTpZB5_0NhbpDnatbEYmbDLLW58d-wXuY=:
    DirtyCache:
      max-upper-bound: 1.008e-06
      median-lower-bound: 6.720000000000001e-07
      median-upper-bound: 1.008e-06
      min-lower-bound: 6.56e-07
    FullCache:
      max-upper-bound: 9.84e-07
      median-lower-bound: 6.4e-07
      median-upper-bound: 9.6e-07
      min-lower-bound: 6.240000000000001e-07
    HotCache:
      max-upper-bound: 9.84e-07
      median-lower-bound: 6.4e-07
      median-upper-bound: 9.6e-07
      min-lower-bound: 6.240000000000001e-07
    Load/1:
      max-upper-bound: 1.104e-06
      median-lower-bound: 7.36e-07
      median-upper-bound: 1.104e-06
      min-lower-bound: 7.040000000000001e-07
    Load/2:
      max-upper-bound: 1.104e-06
      median-lower-bound: 7.2e-07
      median-upper-bound: 1.0799999999999998e-06
      min-lower-bound: 7.040000000000001e-07
  sparc/gr712rc/smp/qual-only/LDe0OENspSb4U2hhl9QK2R3q4ntkBdYP_JLnD_-aZ34=:
    DirtyCache:
      max-upper-bound: 1.6499999999999999e-06
      median-lower-bound: 1.0896000000000001e-06
      median-upper-bound: 1.6344e-06
      min-lower-bound: 1.0896000000000001e-06
    FullCache:
      max-upper-bound: 1.2900000000000001e-06
      median-lower-bound: 3.6e-07
      median-upper-bound: 5.399999999999999e-07
      min-lower-bound: 3.6e-07
    HotCache:
      max-upper-bound: 5.244e-07
      median-lower-bound: 3.496e-07
      median-upper-bound: 5.244e-07
      min-lower-bound: 3.4000000000000003e-07
    Load/1:
      max-upper-bound: 1.6344e-06
      median-lower-bound: 1.0896000000000001e-06
      median-upper-bound: 1.6344e-06
      min-lower-bound: 1.08e-06
    Load/2:
      max-upper-bound: 1.86e-06
      median-lower-bound: 1.2296e-06
      median-upper-bound: 1.8444e-06
      min-lower-bound: 1.2296e-06
  sparc/gr740/smp/qual-only/3Y1G8SMm2FRTpZB5_0NhbpDnatbEYmbDLLW58d-wXuY=:
    DirtyCache:
      max-upper-bound: 4.6751999999999996e-05
      median-lower-bound: 3.0944e-05
      median-upper-bound: 4.6416000000000004e-05
      min-lower-bound: 3.0592e-05
    FullCache:
      max-upper-bound: 4.6031999999999996e-05
      median-lower-bound: 3.0416e-05
      median-upper-bound: 4.5623999999999996e-05
      min-lower-bound: 2.9568e-05
    HotCache:
      max-upper-bound: 4.5552e-05
      median-lower-bound: 3.0368000000000005e-05
      median-upper-bound: 4.5552e-05
      min-lower-bound: 3.0352e-05
    Load/1:
      max-upper-bound: 5.1432e-05
      median-lower-bound: 3.4112e-05
      median-upper-bound: 5.1167999999999995e-05
      min-lower-bound: 3.3488e-05
    Load/2:
      max-upper-bound: 5.1263999999999996e-05
      median-lower-bound: 3.3888000000000005e-05
      median-upper-bound: 5.0832e-05
      min-lower-bound: 3.3232e-05
    Load/3:
      max-upper-bound: 5.1288e-05
      median-lower-bound: 3.4064000000000005e-05
      median-upper-bound: 5.1096e-05
      min-lower-bound: 3.3168e-05
    Load/4:
      max-upper-bound: 5.1504e-05
      median-lower-bound: 3.4160000000000005e-05
      median-upper-bound: 5.124e-05
      min-lower-bound: 3.3936e-05
links:
- role: requirement-refinement
  uid: perf-runtime
- role: runtime-measurement-request
  uid: ../val/perf
non-functional-type: performance-runtime
params: {}
rationale: null
references: []
requirement-type: non-functional
test-body:
  brief: |
    Send two events.  Satisfy the event condition.
  code: |
    ctx->begin = T_tick();
    ctx->status = rtems_event_send( ctx->worker_id, EVENT_END | EVENT_OTHER );
  description: null
test-cleanup:
  brief: |
    Move worker to scheduler A.
  code: |
    SetScheduler( ctx->worker_id, SCHEDULER_A_ID, PRIO_HIGH );
  description: null
test-prepare:
  brief: |
    Move worker to scheduler B.
  code: |
    SetScheduler( ctx->worker_id, SCHEDULER_B_ID, PRIO_NORMAL );
  description: null
test-setup: null
test-teardown:
  brief: |
    Make sure the worker waits for the next event.  Set the measured runtime.
    Discard samples interrupted by a clock tick.
  code: |
    T_quiet_rsc_success( ctx->status );

    WaitForNextTask( 1, ctx->worker_id );
    *delta = ctx->end - ctx->begin;

    return tic == toc;
  description: null
text: |
  Let ``U` and `V`` be two tasks with distinct home schedulers.  Let :math:`B`
  be a time point measured by ``U`` right before a call to ${../if/send:/name}
  which does satisfy the event condition of the waiting task ``V`` which is
  scheduled on another processor.  Let :math:`E` be a time point measured by
  ``V`` right after the first context switch after :math:`B`.

  While the execution environment is ${.:/environment}, while the task ``V``
  waits for events, while the measurement sample is :math:`E - B`, when exactly
  ${../val/perf:/params/sample-count} samples are collected, the
  ${.:/limit-kind} shall be ${.:/limit-condition}.
type: requirement
